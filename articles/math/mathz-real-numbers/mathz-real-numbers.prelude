%
% fuzzlib.x
%
% This file is part of fuzz2000
% Copyright (c) 1982--2006 J. M. Spivey
% All rights reserved
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice,
%    this list of conditions and the following disclaimer.
% 2. Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
% 3. The name of the author may not be used to endorse or promote products
%    derived from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
% IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
% OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
% IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
% OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
% WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
% OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
% ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% 
% $Id: fuzzlib.x,v 1.2 2007-02-16 12:45:13 mike Exp $
%

%%token $"\bind" 335
%%token $"\bsup" 262
%%token $"\cross" 266
%%token $"\defs" 268
%%token $"\ELSE" 333
%%token $"\esup" 275
%%token $"\exists" 277
%%token $"\exists_1" 278
%%token $"false" 280
%%token $"\forall" 282
%%token $"\hide" 284
%%token $"\iff" 273
%%token $"\IF" 331
%%token $"\implies" 285
%%token $"\in" 286
%%token $"\inrel" 329
%%token $"\lambda" 289
%%token $"\land" 258
%%token $"\langle" 334
%%token $"\lbag" 290
%%token $"\ldata" 291
%%token $"\LET" 292
%%token $"\limg" 293
%%token $"\lnot" 296
%%token $"\lor" 298
%%token $"\mid" 124
%%token $"\mu" 294
%%token $"\pipe" 299
%%token $"\power" 300
%%token $"\pre" 301
%%token $"\project" 302
%%token $"\rangle" 336
%%token $"\rbag" 303
%%token $"\rdata" 304
%%token $"\rimg" 305
%%token $"\semi" 281
%%token $"\spot" 64
%%token $"\THEN" 332
%%token $"\theta" 306
%%token $"true" 307
%%token $"\vdash" 309
%%token $"\where" 310
%%token $"==" 272
%%token $"%%ingen" 312
%%token $"%%inop" 313
%%token $"%%inrel" 314
%%token $"%%pregen" 316
%%token $"%%prerel" 317
%%token $"%%postop" 315
%%token $"%%type" 318
%%token $"%%tame" 319
%%token $"%%pname" 320
%%token $"%%ignore" 338
%%token $"%%debug" 340
%%token $"%%line" 341
%%token $"\begin{axdef}" 259
%%token $"\begin{gendef}" 260
%%token $"\begin{schema}" 261
%%token $"\begin{zed}" 264
%%token $"\begin{syntax}" 263
%%token $"\end{axdef}" 270
%%token $"\end{gendef}" 271
%%token $"\end{schema}" 274
%%token $"\end{zed}" 279
%%token $"\end{syntax}" 276

%%inop \mapsto							1
%%inop \upto							2
%%inop + - \cup \setminus \cat \uplus \uminus			3
%%inop * \div \mod \cap \circ \comp \filter \extract \otimes	4
%%inop \oplus \bcount						5
%%inop \dres \rres \ndres \nrres				6
%%postop \plus \star \inv
%%inrel \neq \notin \subseteq \subset < \leq \geq > \inbag \partition
%%inrel \prefix \subbageq \suffix \inseq
%%prerel \disjoint
%%ingen \rel \fun \pinj \inj \psurj \surj \bij \ffun \finj
%%pregen \power_1 \id \finset \iseq
%%ignore \quad \qquad

%%type \pfun \nat \seq \bag
\begin{gendef}[X]
	\finset \_: \power (\power X)
\end{gendef}
\begin{gendef}[X,Y]
	\_ \rel \_, \_ \ffun \_: \power (\power (X \cross Y)) \\
	\_ \fun \_: \power (X \pfun Y)
\end{gendef}
%%type \rel \ffun \finset

\begin{axdef}
	-: \num \fun \num \\
        \_ + \_ , \_ - \_ , \_ * \_: \num \cross \num \fun \num \\
        \_ \div \_ , \_ \mod \_: 
		\num \cross \num \pfun \num \\
        \_ < \_ , \_ \leq \_ , \_ \geq \_ , \_ > \_: 
		\num \rel \num \\
	\nat_1: \power \nat \\
        succ: \nat \fun \nat \\
	\_ \upto \_: \num \cross \num \fun \power \num \\
        min: \power \num \pfun \num \\
        max: \power \num \pfun \num
\end{axdef}

\begin{gendef}[X]
        \_ \neq \_: X \rel X \\
        \_ \notin \_: X \rel \power X \\
	\empty, \emptyset: \power X \\
	\_ \subseteq \_ , \_ \subset \_: \power X \rel \power X \\
	\power_1 \_: \power (\power X) \\
        \_  \cup \_ , \_ \cap \_ , \_ \setminus \_:
                \power X \cross \power X \fun \power X \\
        \bigcup, \bigcap: \power (\power X) \fun \power X \\
	\id \_: X \rel X \\
        \_\plus, \_\star: (X \rel X) \fun (X \rel X) \\
        iter: \num \fun (X \rel X) \fun (X \rel X) \\
	\finset_1 \_: \power (\finset X) \\
        \#: \finset X \fun \nat \\
	\seq_1 \_, \iseq \_: \power (\seq X) \\
        \_ \cat \_ :  \seq X \cross \seq X \fun \seq X \\
        head, last: \seq X \pfun X \\
        tail, front: \seq X \pfun \seq X \\
        rev: \seq X \fun \seq X \\
        \_ \filter \_: \seq X \cross \power X \fun \seq X \\
        \_ \extract \_: \power \nat \cross \seq X \pfun \seq X \\
	squash: (\nat \ffun X) \pfun \seq X \\
	\_\prefix\_, \_\suffix\_, \_\inseq\_: \seq X \rel \seq X \\
        \dcat: \seq (\seq X) \fun \seq X \\
        count: \bag X \fun (X \fun \nat) \\
	\_\bcount\_: \bag X \cross X \fun \nat \\
        \_ \inbag \_: X \rel \bag X \\
	\_ \subbageq \_: \bag X \rel \bag X \\
        \_ \uplus \_, \_ \uminus \_: \bag X \cross \bag X \fun \bag X \\
	\_ \otimes \_: \nat \cross \bag X \fun \bag X \\
        items: \seq X \fun \bag X
\end{gendef}

\begin{gendef}[X,Y]
        first: X \cross Y \fun X \\
        second: X \cross Y \fun Y \\
        \_ \mapsto \_: X \cross Y \fun X \cross Y \\
        \dom: (X \rel Y) \fun \power X \\
        \ran: (X \rel Y) \fun \power Y \\
        \_ \dres \_: \power X \cross (X \rel Y) \fun (X \rel Y) \\
        \_ \rres \_: (X \rel Y) \cross \power Y \fun (X \rel Y) \\
        \_ \ndres \_: \power X \cross (X \rel Y) \fun (X \rel Y) \\
        \_ \nrres \_: (X \rel Y) \cross \power Y \fun (X \rel Y) \\
        \_\inv: (X \rel Y) \fun (Y \rel X) \\
        \_\limg\_\rimg: (X \rel Y) \cross \power X \fun \power Y \\
        \_ \oplus \_: (X \rel Y) \cross (X \rel Y) \fun (X \rel Y) \\
	\_ \pinj \_, \_ \inj \_, \_ \psurj \_, 
	\_ \surj \_, \_ \bij \_, \_ \finj \_: \power(X \pfun Y) \\
        \disjoint \_: \power (X \pfun \power Y) \\
        \_ \partition \_: (X \pfun \power Y) \rel \power Y
\end{gendef}

\begin{gendef}[X,Y,Z]
        \_ \comp \_: (X \rel Y) \cross (Y \rel Z) \fun (X \rel Z) \\
	\_ \circ \_: (Y \rel Z) \cross (X \rel Y) \fun (X \rel Z)
\end{gendef}

%%pname \pfun $"-+>"
%%pname \ffun $"-++>"
%%pname \rel $"<->"
%%pname \seq $"seq"
%%pname \bag $"bag"
%%pname \finset $"F"
%%pname \nat $"NN"
%%pname \num $"ZZ"
%%pname \upto $".."
%%pname \# $"#"
%%pname \power_1 $"P_1"
%%pname \id $"id"
%%pname \mapsto $"|->"
%%pname \dom $"dom"
%%pname \ran $"ran"
%%pname \fun $"-->"
%%pname \pinj $">+>"
%%pname \inj $">->"
%%pname \psurj $"-+>>"
%%pname \surj $"-->>"
%%pname \bij $">->>"
%%pname \finj $">++>"
%%pname \disjoint $"disjoint"
%%pname \partition $"partition"

%%tame \cup \cap \setminus \bigcup \bigcap count \uplus items
%%tame \plus \cat head last tail front rev \filter \dcat
%%tame first second \mapsto \dom \ran \dres \rres \ndres \nrres 
%%tame \inv \limg\rimg \oplus \comp \circ
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{amsmath}
\ProvidesPackage{mathz-core}[2022/11/29 mathz Library Core Definitions]

% formal parameters for generic constructions
\newcommand{\genA}{\mathsf{a}}
\newcommand{\genB}{\mathsf{b}}
\newcommand{\genC}{\mathsf{c}}
\newcommand{\genD}{\mathsf{d}}
\newcommand{\genE}{\mathsf{e}}
\newcommand{\genF}{\mathsf{f}}
\newcommand{\genG}{\mathsf{g}}
\newcommand{\genH}{\mathsf{h}}
\newcommand{\genI}{\mathsf{i}}
\newcommand{\genJ}{\mathsf{j}}
\newcommand{\genK}{\mathsf{k}}
\newcommand{\genL}{\mathsf{l}}
\newcommand{\genM}{\mathsf{m}}
\newcommand{\genN}{\mathsf{n}}
\newcommand{\genO}{\mathsf{o}}
\newcommand{\genP}{\mathsf{p}}
\newcommand{\genQ}{\mathsf{q}}
\newcommand{\genR}{\mathsf{r}}
\newcommand{\genS}{\mathsf{s}}
\newcommand{\genT}{\mathsf{t}}
\newcommand{\genU}{\mathsf{u}}
\newcommand{\genV}{\mathsf{v}}
\newcommand{\genW}{\mathsf{w}}
\newcommand{\genX}{\mathsf{x}}
\newcommand{\genY}{\mathsf{y}}
\newcommand{\genZ}{\mathsf{z}}

% arbitrary sets used in theorems, remarks, and examples involving generic constructs
\newcommand{\setA}{\mathsf{A}}
\newcommand{\setB}{\mathsf{B}}
\newcommand{\setC}{\mathsf{C}}
\newcommand{\setD}{\mathsf{D}}
\newcommand{\setE}{\mathsf{E}}
\newcommand{\setF}{\mathsf{F}}
\newcommand{\setG}{\mathsf{G}}
\newcommand{\setH}{\mathsf{H}}
\newcommand{\setI}{\mathsf{I}}
\newcommand{\setJ}{\mathsf{J}}
\newcommand{\setK}{\mathsf{K}}
\newcommand{\setL}{\mathsf{L}}
\newcommand{\setM}{\mathsf{M}}
\newcommand{\setN}{\mathsf{N}}
\newcommand{\setO}{\mathsf{O}}
\newcommand{\setP}{\mathsf{P}}
\newcommand{\setQ}{\mathsf{Q}}
\newcommand{\setR}{\mathsf{R}}
\newcommand{\setS}{\mathsf{S}}
\newcommand{\setT}{\mathsf{T}}
\newcommand{\setU}{\mathsf{U}}
\newcommand{\setV}{\mathsf{V}}
\newcommand{\setW}{\mathsf{W}}
\newcommand{\setX}{\mathsf{X}}
\newcommand{\setY}{\mathsf{Y}}
\newcommand{\setZ}{\mathsf{Z}}
\documentclass{amsart}

\usepackage{mathz-project}
\usepackage{mathz-core}

\usepackage{mathz-preamble}

\addbibresource{mathz-references.bib}

\begin{document}

\title{\mathz\ Library Core Objects}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains \ZN\ definitions for some  \mathz\ library core objects,
namely formal generic parameters and arbitrary sets.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

The \texttt{core} package contains definitions for formal generic parameters and arbitrary sets.

\section{Formal Generic Parameters}

\ZN\ supports the definition of generic constants and schemas which take sets as parameters.
Formal generic parameters are used in these definitions.
It is useful to typographically distinguish formal generic parameters from other objects.
Therefore, as a purely stylistic convention, we use the symbols $\genA, \genB, \dots, \genZ$ to denote formal generic parameters.
These symbols are produced using the \LaTeX\ commands \verb|\genA|, \verb|\genB|, $\dots$, \verb|\genZ|.

For example, define the generic constant $triple[\genT]$ to be the set of all triples of elements of $\genT$ 
where $\genT$ is any set.
\begin{zed}
	triple[\genT] == \genT \cross \genT \cross \genT
\end{zed}

\section{Arbitrary Sets}

In mathematical writing we often need to state theorems, remarks, and examples about generic constructions.
Such statements must hold when each formal generic parameter is replaced by any arbitrary set.
This condition is equivalent to universally quantifying the statement over the set of all sets.
However, \ZN\ does not allow universal quantification over the set of all sets since this leads to the Russell paradox.
In fact, Russell proposed typed set theory as a way to avoid this paradox.

Some formal languages avoid the Russell paradox by making a distinction between sets and types,
and by introducing an explicit hierarchy of type universes in which the collection of all types at a given level belongs to the next level.
Another approach is to distinguish between small sets and large sets, with the set of all small sets being a large set.
\ZN\ avoids the Russel paradox by not allowing universal quantification over types.

In more detail, although \ZN\ is based on typed set theory, 
it does not actually include a syntactic mechanism to represent types. 
New base types are introduced by declaring them as \textit{given sets}.
It is a \ZN\ type error to compare or combine subsets of distinct given sets.
A given set is not a proper subset of any other set, and is therefore a \textit{maximal set}.
Thus, in \ZN, a new type is equated to its maximal set.

As a workaround for the absence in \ZN\ of a way to universally quantify over types, 
we adopt the convention of stating theorems, remarks, and examples that are asserted to hold for arbitrary sets 
by stating them in terms of certain predefined given sets, with the understanding that these 
predefined given sets are completely unconstrained by additional axioms.
We refer to these predefined given sets as \textit{arbitrary sets}.
It is therefore a \mathz\ error to use any of these predefined arbitrary sets outside of the statement of a theorem, remark, or example.

This workaround is similar to the introduction rule for universal quantification in predicate calculus.
To prove a universally quantified statement in predicate calculus, one assumes an arbitrary element and then proves the conclusion for it.
Since the element was arbitrary, one can then universally quantify over it.
Of course, in \mathz\ we will only prove statements for some arbitrary set, and not explicitly quantify over it.

Let the symbols $\setA, \setB, \dots \setZ$ denote these predefined arbitrary sets.
\begin{zed}
	[\setA, \setB, \setC, \setD, \setE, \setF, \setG, \setH, \setI, \setJ, \setK, \setL, \setM, 
	\setN, \setO, \setP, \setQ, \setR, \setS, \setT, \setU, \setV, \setW, \setX, \setY, \setZ]
\end{zed}
These symbols are produced using the \LaTeX\ commands \verb|\setA|, \verb|\setB|, $\dots$, \verb|\setZ|.

For example, consider the following statement which holds for the arbitrary set $\setX$.
\begin{remark}
Equality is reflexive.
\begin{zed}
	\forall x: \setX @ x = x
\end{zed}
\end{remark}

\printbibliography

\end{document}  \NeedsTeXFormat{LaTeX2e}
\RequirePackage{amsmath}
\ProvidesPackage{mathz-sets}[2022/02/01 Z Notation for sets package]

% sets

% families of sets
%%pregen \Fam
\DeclareMathOperator{\Fam}{\mathcal{F}}

% the induced family infix operator
%%inop \inducedFam 6
\newcommand{\inducedFam}{\mathbin{|_{\Fam}}}

% the product family infix operator
%%inop \prodFam 5
\newcommand{\prodFam}{\mathbin{\cross_{\Fam}}}

% the constant function
\DeclareMathOperator{\const}{const}

% the function restriction infix operator
%%inop \restrictU 6
\newcommand{\restrictU}{\mathbin{|}}

% the set of binary digits
\newcommand{\B}{\mathbb{B}}

% the indicator function of a set
%%pregen \indF
\DeclareMathOperator{\indF}{\mathbf{1}}

% the delta function of a set
%%pregen \deltaF
\DeclareMathOperator{\deltaF}{\delta}
\documentclass{amsart}

\usepackage{mathz-core}
\usepackage{mathz-sets}

\usepackage{mathz-preamble}

\addbibresource{mathz-references.bib}

\begin{document}

\title{Sets}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains \ZN\ definitions for 
concepts related to sets.
It has been type checked by \fuzz.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

Typed set theory forms the mathematical foundation of \ZN\cite{spivey-zrm}.
Many set theory concepts are defined in its built-in mathematical toolkit. 
This article augments the toolkit with some additional concepts.
It has been type checked by \fuzz\cite{spivey-fm}.

\section{Binary Digits}

Let $bit$ denote the set of \textit{binary digits}, namely the set $\{ 0, 1\} \subseteq \num$.

\begin{zed}
	bit == \{ 0, 1 \}
\end{zed}

Let the notation $\B$ denote the set of bits.

\begin{zed}
	\B == bit
\end{zed}

\begin{example}
Zero and one are bits, but two isn't.
\begin{zed}
	0 \in \B
\also
	1 \in \B
\also
	2 \notin \B
\end{zed}
\end{example}

\section{Families of Subsets}

Let $\genT$ be a set.
A \textit{family} of subsets of $\genT$ is a set of subsets of $\genT$.
Let $Fam[\genT]$ denote the set of all families of subsets of $\genT$.

\begin{zed}
	Fam[\genT] == \power(\power \genT)
\end{zed}

\begin{example}
The set consisting of the empty set and $\setX$ is a family of subsets of $\setX$.
\begin{zed}
	\{ \emptyset, \setX \} \in Fam[\setX]
\end{zed}
\end{example}

Let the notation $\Fam \genT$ denote the family of subsets of $\genT$ .

\begin{zed}
	\Fam \genT == Fam[\genT]
\end{zed}

\section{Functions}

\subsection{Binary Functions}

Let $\genT$ be a set. A function that maps $\genT$ to $\B$ is called a \textit{binary function} on $\genT$.

\begin{zed}
	binary\_function[\genT] == \genT \fun \B
\end{zed}

\begin{example}
The function that maps the set $\setT$ to $0$ is a binary function.
\begin{zed}
	(\lambda x: \setT @ 0) \in binary\_function[\setT]
\end{zed}
\end{example}

\subsection{Constant Functions}

Let $\genT$ and $\genU$ be sets and let $c$ be some given element of  $\genU$.
The mapping $f$ that sends every element $x$ of $\genT$ to $c$ is called the \textit{constant function} on $\genT$ with value $c$.

\begin{schema}{ConstantFunction}[\genT, \genU]
	c: \genU \\
	f: \genT \fun \genU
\where
	f = (\lambda x: \genT @ c)
\end{schema}

Let $constant\_function~c$ denote the constant function $f$ on $\genT$ with value $c$.

\begin{zed}
	constant\_function[\genT, \genU] == \{~ConstantFunction[\genT, \genU] @ c \mapsto f ~\}
\end{zed}

\begin{remark}
The mapping $constant\_function$ maps each element $c \in \setU$ to a function $\setT \fun \setU$.
\begin{zed}
	constant\_function[\setT, \setU] \in \setU \fun (\setT \fun \setU)
\end{zed}
\end{remark}

Let the notation $\const c$ denote the constant function with value $c$.

\begin{zed}
	\const[\genT, \genU] == constant\_function[\genT, \genU]
\end{zed}

\begin{remark}
\begin{zed}
	\forall c: \setU; x: \setT @ \const[\setT, \setU] c~x = c
\end{zed}
\end{remark}

\subsection{Delta Functions}

Let $\genT$ be a set and let $x, y \in \genT$. 
Define the \textit{equality indicator bit} $z$ of $(x, y)$ to be $1$ if $x = y$ and $0$ otherwise.

\begin{schema}{EqualityIndicator}[\genT]
	x, y: \genT \\
	z: \B
\where
	z = \IF x = y \THEN 1 \ELSE 0
\end{schema}

Define the delta function $delta(x, y)$ to be the equality indication bit of $(x, y)$.

\begin{zed}
	delta[\genT] == \{~ EqualityIndicator[\genT] @ (x, y) \mapsto z ~\}
\end{zed}

\begin{remark}
\begin{zed}
	delta[\setX] \in \setX \cross \setX \fun \B
\end{zed}
\end{remark}

\begin{example}
\begin{zed}
	delta(0, 0) = 1
\also
	delta(0, 1) = 0
\end{zed}
\end{example}

\begin{remark}
\begin{zed}
	\forall x: \setX @ \\
	\t1	delta(x, x) = 1
\end{zed}
\end{remark}

Let the notation $\deltaF \genT$ denote the delta function $delta[\genT]$.

\begin{zed}
	\deltaF \genT == delta[\genT]
\end{zed}

\begin{example}
\begin{zed}
	(\deltaF \num) (0,1) = 0
\end{zed}
\end{example}

\subsection{Function Restriction}

Let $\genT$ and $\genU$ be sets, let $f: \genT \fun \genU$, and let $T \subseteq \genT$ be a subset.
Let $g$ denote the restriction of $f$ to $T$.

\begin{schema}{FunctionRestriction}[\genT, \genU]
	f: \genT \fun \genU \\
	T: \power \genT \\
	g: \genT \pfun \genU
\where
	g = T \dres f
\end{schema}

Let  $restriction(f, T)$ denote the restriction of $f$ to $T$.

\begin{zed}
	restriction[\genT, \genU] == \{~ FunctionRestriction[\genT, \genU] @ (f, T) \mapsto g ~\}
\end{zed}

\begin{remark}
\begin{zed}
	restriction[\setT, \setU] \in (\setT \fun \setU) \cross \power \setT \fun (\setT \pfun \setU)
\end{zed}
\end{remark}

Let the notation $f \restrictU T$ denote the restriction of $f$ to $T$.

\begin{zed}
	(\_ \restrictU \_)[\genT, \genU] == restriction[\genT, \genU]
\end{zed}

\begin{remark}
Function restriction is domain restriction with arguments reversed.
\begin{zed}
	\forall FunctionRestriction[\setT, \setU] @ \\
	\t1	f \restrictU T = T \dres f
\end{zed}
\end{remark}

\subsection{Indicator Functions}

Let $\genT$ be a set and let $X \subseteq \genT$ be a subset.
The \textit{indicator function}  $f$  of $X$ maps each element $a \in \genT$ to 1 if $a \in X$ and 0 otherwise.
The indicator function is also referred to as the \textit{characteristic function} of $X$.

\begin{schema}{IndicatorFunction}[\genT]
	X: \power \genT \\
	f: \genT \fun \B
\where
	f = (\lambda a: \genT @ \IF a \in X \THEN 1 \ELSE 0)
\end{schema}

Let $indicator\_function~X$ denote the indicator function of $X$.

\begin{zed}
	indicator\_function[\genT] == \{~ IndicatorFunction[\genT] @ X \mapsto f ~\}
\end{zed}

\begin{remark}
For each subset $X \subseteq \setT$, the indicator function of $X$ is a binary function on $\setT$.
\begin{zed}
	indicator\_function[\setT] \in \power \setT \fun \setT \fun \B
\end{zed}
\end{remark}

We introduce the prefix generic symbol $(\indF \_)$ where $(\indF \genT)X = indicator\_function[\genT] X$.

\begin{zed}
	\indF \genT == indicator\_function[\genT]
\end{zed}

\begin{remark}
The domain of the range restriction of the indicator function of a set $X$ to the range $\{1\}$ is $X$.
\begin{zed}
	\forall X: \power \setT @ \\
	\t1	\dom((\indF \setT)X \rres \{1\}) = X
\end{zed}
\end{remark}

\section{The Support of a Function}

Let $\genT$ be a set and let $f$ be an integer-valued function on $\genT$.
The \textit{support} $S$ of $f$ is the set of elements $x$ in $\genT$  that take nonzero values.

\begin{schema}{Support}[\genT]
	f: \genT \fun \num \\
	S: \power \genT
\where
	S = \{~ x: \genT | f~x \neq 0 ~\}
\end{schema}

Let $support~f$ denote the support $S$ of $f$.

\begin{zed}
	support[\genT] == \{~ Support[\genT] @ f \mapsto S ~\}
\end{zed}

\begin{example}
The support of the indicator function of a set $X$ is $X$.
\begin{zed}
	\forall X: \power \setT @ \\
	\t1 support((\indF \setT)X) = X
\end{zed}
\end{example}

An integer-valued function is said to have \textit{finite support} if its support is a finite set.

\begin{schema}{FiniteSupport}[\genT]
	Support[\genT]
\where
	S \in \finset \genT
\end{schema}

Let $finite\_support[\genT]$ denote the set of all integer-valued functions on $\genT$ that have finite support.

\begin{zed}
	finite\_support[\genT] == \{~ FiniteSupport[\genT] @ f ~\}
\end{zed}

\begin{remark}
\begin{zed}
	finite\_support[\setT] \subseteq \setT \fun \num
\end{zed}
\end{remark}

\printbibliography

\end{document}\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mathz-integers}[2022/02/01 Z Notation for integers package]

% the exponentiation infix operator x ** n
%%inop \expN 5
\newcommand{\expN}{\mathbin{**}}

%%inop \foo 3
\newcommand{\foo}{\mathbin{+}}

% the divisibility infix relation x | y for integers
%%inrel \divides
\newcommand{\divides}{\mathrel{\mid}}

% the addition infix operator x + y for integer sequences
%%inop \addSeqZ 3
\newcommand{\addSeqZ}{\mathbin{+}}
\documentclass{amsart}

\usepackage{mathz-integers}

\usepackage{mathz-preamble}

\addbibresource{mathz-references.bib}

\begin{document}

\title{Integers}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains \ZN\ definitions for 
concepts related to the integers, $\num$.
It has been type checked by \fuzz.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

The integers $\num$ are built-in to \ZN.
This article provides definitions for some related objects so that they can be used and type checked in formal Z specifications.

\section{Exponentiation}

Let $x \in \num$ and $n \in \nat$. Then $x$ raised to the exponent $n$ is the product of $x$ multiplied by itself $n$ times,
with the convention that for $n = 0$ the result is $1$.
Let $exp(x, n)$ denote the result.

\begin{axdef}
	exp: \num \cross \nat \fun \num
\where
	\forall x: \num @ exp(x, 0) = 1
\also
	\forall x: \num; n: \nat_1 @ exp(x, n) = x * exp(x, n - 1)
\end{axdef}

\begin{example}
\begin{zed}
	exp(5,2) = 25
\end{zed}
\end{example}

\begin{remark}
\begin{zed}
	\forall x: \num @ \\
	\t1	exp(x, 0) = 1
\end{zed}
\end{remark}

\begin{remark}
\begin{zed}
	\forall x: \num @ \\
	\t1	exp(x, 1) = x
\end{zed}
\end{remark}

\begin{remark}
\begin{zed}
	\forall x: \num; n, m: \nat @ \\
	\t1	exp(x, n + m) = exp(x, n) * exp(x, m)
\end{zed}
\end{remark}

\begin{remark}
\begin{zed}
	\forall x, y: \num; n: \nat @ \\
	\t1	exp(x * y, n) = exp(x, n) * exp(y, n)
\end{zed}
\end{remark}

Exponentiation is normally denoted $x^n$ but \ZN\ cannot reproduce that.
Instead we use the infix operator notation that is common to programming languages such as FORTRAN and Python.
Define the notation $x \expN n = exp(x, n)$.

\begin{zed}
	(\_ \expN \_) == exp
\end{zed}

\begin{example}
\begin{zed}
	5 \expN 2 = 25
\end{zed}
\end{example}

\section{Divisibility}

This section defines \textit{divisibility} of integers.

Given integers $x$ and $y$ we say that $x$ \textit{divides} $y$ if there is some integer $q$ such 
that $q x = y$.

\begin{schema}{Divides}
	x, y, q : \num
\where
	q * x = y
\end{schema}

Let $divides$ denote the divisibility relation between integers
where $(x,y) \in divides$ means that $x$ divides $y$.

\begin{zed}
	divides == \{~ Divides @ x \mapsto y ~\}
\end{zed}

\begin{remark}
\begin{zed}
	divides \in \num \rel \num
\end{zed}
\end{remark}

We introduce the usual infix notation $x \divides y$ to denote that $(x, y) \in divides$.
\begin{zed}
(\_ \divides \_) == divides
\end{zed}

\begin{example}
The integer $7$ divides $42$ because $6 * 7 = 42$.

\begin{zed}
	7 \divides 42
\end{zed}
\end{example}

\begin{remark}
Every integer $x$ divides $0$ because $0 * x = 0$.

\begin{zed}
	\forall x : \num @ x \divides 0
\end{zed}
\end{remark}

\section{Divisors}

Let $x$ be a nonzero integer that divides the integer $y$.
We say that $x$ is a \textit{divisor} of $y$.

\begin{schema}{Divisor}
	Divides
\where
	x \neq 0
\end{schema}

Let the relation $(x, y) \in is\_divisor\_of$ denote that $x$ is a divisor of $y$.

\begin{zed}
	is\_divisor\_of == \{~ Divisor @ x \mapsto y ~\}
\end{zed}

Let the set $divisors(y)$ denote the set of all divisors of the integer $y$.

\begin{zed}
	divisors == (\lambda y: \num @ \{~ x : \num | (x, y) \in is\_divisor\_of  ~\})
\end{zed}

\begin{remark}
\begin{zed}
	divisors \in \num \fun \power \num
\end{zed}
\end{remark}

\begin{example}
The integer $6$ has the following divisors.

\begin{zed}
	divisors(6) = \{-6, -3, -2, -1, 1, 2, 3, 6 \}
\end{zed}
\end{example}

Let the set $positive\_divisors(y)$ denote the set of all positive divisors of the integer $y$.

\begin{zed}
	positive\_divisors == (\lambda y: \num @ divisors(y)  \cap \nat_1)
\end{zed}

\begin{remark}
\begin{zed}
	positive\_divisors \in \num \fun \power \nat_1
\end{zed}
\end{remark}

\begin{example}
The integer $6$ has the following positive divisors.
\begin{zed}
	positive\_divisors(6) = \{1, 2, 3, 6 \}
\end{zed}
\end{example}

\section{Prime Numbers}

An integer $p$ is \textit{prime} if it is greater than one 
and only has one and itself as positive divisors.

\begin{schema}{Prime}
	p: \num
\where
	p > 1
\also
	positive\_divisors(p) = \{ 1, p \}
\end{schema}
\begin{itemize}
	\item $p$ is greater than $1$.
	\item $1$ and $p$ are the only positive divisors of $p$.
\end{itemize}

\begin{example}
The integer $2$ is prime.

\begin{zed}
	\LET p == 2 @ \\
	\t1	Prime
\end{zed}
\end{example}

Let $primes$ denote the set of all primes.

\begin{zed}
	primes == \{~ Prime @ p ~\}
\end{zed}

\begin{remark}
\begin{zed}
	primes \subset \nat_1
\end{zed}
\end{remark}

\begin{example}
The natural numbers $2, 3, 5,$ and $7$ are primes.

\begin{zed}
	\{2, 3, 5, 7\} \subseteq primes
\end{zed}
\end{example}

\section{Addition of Integer Sequences}

Let $l$ be a natural number and
let $x$ and $y$ be two integer sequences of length $l$.
Their sum $z = x + y$ is the integer sequence of length $l$ defined by pointwise addition
of the terms in $x$ and $y$.

\begin{schema}{AddIntegerSequences}
	l : \nat \\
	x, y, z : \seq \num
\where
	l = \# x = \# y
\also
	z = (\lambda i : 1 \upto l @ x~i + y~i)
\end{schema}
\begin{itemize}
	\item The sequence $z$ is defined by pointwise addition of the sequences $x$ and $y$.
\end{itemize}

Let the function $add\_int\_seq(x, y) = z$ be the sum of two equal-length integer sequences.

\begin{zed}
	add\_int\_seq == \{~ AddIntegerSequences @ (x, y) \mapsto z ~\}
\end{zed}

\begin{remark}
Addition is a partial function on the set of all pairs of integer sequences.
\begin{zed}
	add\_int\_seq \in \seq \num \cross \seq \num \pfun \seq \num
\end{zed}
\end{remark}

We introduce the usual infix notation $x \addSeqZ y = add\_int\_seq(x, y)$.

\begin{zed}
	(\_ \addSeqZ \_) == add\_int\_seq
\end{zed}

\printbibliography

\end{document}\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mathz-topological-spaces}[2022/02/01 Z Notation for topological spaces package]
\RequirePackage{amsmath}

% continuous mappings between topological spaces
\DeclareMathOperator{\CzeroTT}{C^0}

% topological decoration on operators
\newcommand{\topology}{\mathsf{top}}

% the induced topological space infix operator
\newcommand{\inducedTopSp}{\mathbin{|_\topology}}
%%inop \inducedTopSp 6

% the product topology infix operator
\newcommand{\prodTop}{\mathbin{\cross_\topology}}
%%inop \prodTop 5

% the product topological space infix operator
\newcommand{\prodTopSp}{\mathbin{\cross_\topology}}
%%inop \prodTopSp 5
\documentclass{amsart}

\usepackage{mathz-core}
\usepackage{mathz-sets}
\usepackage{mathz-topological-spaces}
\usepackage{mathz-preamble}

\addbibresource{mathz-references.bib}

\begin{document}

\title{Topological Spaces}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains Z Notation definitions for topological spaces and related concepts.
It has been type checked by \fuzz.
\end{abstract}

\maketitle

\tableofcontents

\section{Topological Spaces}

\subsection{$Topology$}

A {\it topology} $\tau$ on $X$ is a family of subsets of $X$, referred to as the {\it open} subsets of $X$, that satisfy the following axioms.

\begin{schema}{Topology}[X]
	\tau: \Fam X
\where
	\emptyset \in \tau
\also
	X \in \tau
\also
	\forall F: \finset \tau @ \bigcap F \in \tau
\also
	\forall F: \power \tau @ \bigcup F \in \tau
\end{schema}

\begin{itemize}
\item The empty set is open.
\item The whole set is open.
\item The intersection of a finite family of open sets is open.
\item The union of any family of open sets is open. 
\end{itemize}

\subsection{$top$ and $tops$}

Let $top[X]$ denote the set of all topologies on $X$.

\begin{gendef}[X]
	top: \power(\Fam X)
\where
	top = \{~ Topology[X] @ \tau ~\}
\end{gendef}

Let $tops[X]$ denote the set of all topologies on subsets $U \subseteq X$.

\begin{gendef}[X]
	tops: \power(\Fam X)
\where
	tops = \bigcup \{~ U: \power X @ top[U] ~\}
\end{gendef}

\subsection{$discrete$ and $indiscrete$}

The {\it discrete} topology on $X$ consists of all subsets of $X$.
The {\it indiscrete} topology on $X$ consists of just $X$ and $\emptyset$.
Let $discrete[X]$ and $indiscrete[X]$ denote the discrete and indiscrete topologies on $X$.

\begin{gendef}[X]
	discrete, indiscrete: \Fam X
\where
	discrete = \power X
\also
	indiscrete =  \{ \emptyset, X \}
\end{gendef}

\begin{example}
Let $\setX$ be an arbitrary set.
Then $discrete[\setX]$ and $indiscrete[\setX]$ are topologies on $\setX$.

\begin{zed}
	discrete[\setX] \in top[\setX] 
\also
	indiscrete[\setX] \in top[\setX]
\end{zed}

\end{example}

\subsection{$topGen$}

\begin{remark}

The intersection of a set of topologies on $X$ is also a topology on $X$.

\end{remark}

Given a family $B$ of subsets of $X$, the topology {\it generated by} $B$ is the intersection of all
topologies that contain $B$.
The set $B$ is referred to as a {\it basis} for the topology it generates.
Let $topGen[X]~B$ denote the topology on $X$ generated by the basis $B$.

\begin{gendef}[X]
	topGen: \Fam X \fun top[X]
\where
	\forall B: \Fam X @ \\
	\t1	topGen~B = \bigcap \{~ \tau: top[X] | B \subseteq \tau ~\}
\end{gendef}

\begin{example}
Let $\setX$ be an arbitrary set.

\begin{zed}
	topGen[\setX] \emptyset = indiscrete[\setX]
\also
	topGen[\setX] \{ \emptyset \} = indiscrete[\setX]
\also
	topGen[\setX] \{ \setX \} = indiscrete[\setX]
\end{zed}

\end{example}

\subsection{$topSpace$}

Let $X$ be a set.
A {\it topological space} is a pair $(X, \tau)$ where $\tau$ is a topology on $X$.
Let $topSpace[X]$ denote the set of all topological spaces $(X,\tau)$.

\begin{zed}
	topSpace[X] == \{~ \tau: top[X] @ (X, \tau) ~\}
\end{zed}

\begin{example}
Let $\setX$ be an arbitrary set.

\begin{zed}
	(\setX, indiscrete[\setX]) \in topSpace[\setX]
\also
	(\setX, discrete[\setX]) \in topSpace[\setX]
\end{zed}


\end{example}

\subsection{$topSpaces$}

Let $topSpaces[t]$ dentote the set of all topological spaces $(X,\tau)$ where $X$ is a subset of $t$.

\begin{gendef}[t]
	topSpaces: \power t \rel \Fam t
\where
	topSpaces = \{~ X: \power t; \tau: \Fam t | \tau \in top[X] ~\}
\end{gendef}

\begin{remark}

\begin{zed}
	topSpace[\setX] \subseteq topSpaces[\setX]
\end{zed}

\end{remark}

\section{Continuous Mappings}

Let $(X,\tau)$ and $(Y,\sigma)$ be topological spaces.

\subsection{$Continuous$}

A mapping $f \in X \fun Y$ is said to be {\it continuous} if the inverse image of every open set is open.

\begin{schema}{Continuous}[X,Y]
	f: X \fun Y \\
	\tau: top[X] \\
	\sigma: top[Y]
\where
	\forall U: \sigma @ \\
	\t1	f\inv\limg U \rimg \in \tau
\end{schema}

\subsection{\zcmd{CzeroTT}}

Let $A$ and $B$ be topological spaces, and
let $\CzeroTT(A,B)$ denote the set of continuous mappings from $A$ to $B$.

\begin{gendef}[X,Y]
	\CzeroTT: topSpace[X] \cross topSpace[Y] \fun \power (X \fun Y)
\where
	\forall \tau: top[X]; \sigma: top[Y] @ \\
	\t1	\LET A == (X, \tau); B == (Y, \sigma) @ \\
	\t2		\CzeroTT(A,B) = \{~ f: X \fun Y | Continuous[X,Y] ~\}
\end{gendef}

\subsection{The Identity Mapping}

\begin{remark}
The identity mapping is continuous.

\begin{zed}
	\forall \tau: top[\setX] @ \\
	\t1	\LET A == (\setX, \tau) @ \\
	\t2		\id \setX \in \CzeroTT(A, A)
\end{zed}

\end{remark}

\begin{remark}
The constant mapping is continuous.

\begin{zed}
	\forall \tau: top[\setX]; \sigma: top[\setY]; c: \setY @ \\
	\t1	\LET A == (\setX, \tau); B == (\setY, \sigma) @ \\
	\t2		\const[\setX,\setY] c \in \CzeroTT(A,B)
\end{zed}

\end{remark}

\subsection{Composition of Continuous Mapping}

\begin{remark}
Let $\setX$, $\setY$, and $\setZ$ be arbitrary sets.
The composition of continuous mappings is a continuous mapping.

\begin{zed}
	\forall A: topSpace[\setX]; B: topSpace[\setY]; C: topSpace[\setZ] @ \\
	\t1	\forall f: \CzeroTT(A, B); g: \CzeroTT(B, C) @ \\
	\t2		g \circ f \in \CzeroTT(A, C)
\end{zed}

\end{remark}

\section{Induced Topology}

Let $A = (X, \tau)$ be a topological space and let $U \subseteq X$ be a subset.
The topology on $X$ {\it induces} a topology on $U$.
This topology is variously referred to as the {\it induced}, {\it relative}, or {\it subspace} topology on $U$.

\subsection{\zcmd{inducedFam}}

Let $\phi$ be a family of subsets of $X$ and let $U$ be a subset of $X$.
The family of subsets of $U$ {\it induced} by $\phi$ is the set of intersections of the members of $\phi$ with $U$.
Let $\phi \inducedFam U$ denote the family on $U$ induced by $\phi$.

\begin{gendef}[X]
	\_ \inducedFam \_:  \Fam X \cross \power X \fun \Fam X
\where
	\forall \phi: \Fam X; U: \power X @ \\
	\t1	\phi \inducedFam U = \{~ Y: \phi @ Y \cap U ~\}
\end{gendef}

\begin{remark}
If $\tau$ is a topology on $X$ then $\tau \inducedFam U$ is a topology on $U$.

\begin{zed}
	\forall \tau: top[\setX]; U: \power \setX @ \\
	\t1	\tau \inducedFam U \in top[U]
\end{zed}

\end{remark}

\subsection{\zcmd{inducedTopSp}}

Let $(X, \tau) \inducedTopSp U$ denote the corresponding induced topological space.

\begin{gendef}[X]
	\_ \inducedTopSp \_: topSpace[X] \cross \power X \fun topSpaces[X]
\where
	\forall \tau: top[X]; U: \power X @ \\
	\t1	(X, \tau) \inducedTopSp U = (U, \tau \inducedFam U)
\end{gendef}

\section{Product Topology}

Let $(X, \tau)$ and $(Y, \sigma) $ be topological spaces.
There is a natural topology on $X \cross Y$ generated by the products of the sets in $\tau$ and $\sigma$.

\subsection{\zcmd{prodFam}}

Let $X$ and $Y$ be sets and let $\phi$ and $\psi$ be families on them.
The product of these families is the family that consists of the products of the sets in them and is a family on $X \cross Y$.
Let $\phi \prodFam \psi$ denote the product of the families.

\begin{gendef}[X,Y]
	\_ \prodFam \_ : \Fam X \cross \Fam Y \fun \Fam(X \cross Y)
\where
	\forall \phi: \Fam X; \psi: \Fam Y @ \\
	\t1	\phi \prodFam \psi = \{~ U: \phi; V: \psi @ U \cross V ~\}
\end{gendef}

\begin{remark}

If $\tau$ and $sigma$ are topologies then $\tau \prodFam \sigma$ is not, in general, a topology.
However, we can use it to generate a topology.

\end{remark}

\subsection{\zcmd{prodTop}}

Let $\tau \prodTop \sigma$ denote the topology generated by $\tau \prodFam \sigma$.

\begin{gendef}[X,Y]
	\_ \prodTop \_: top[X] \cross top[Y] \fun top[X \cross Y]
\where
	\forall \tau: top[X]; \sigma: top[Y] @ \\
	\t1	\tau \prodTop \sigma = topGen(\tau \prodFam \sigma)
\end{gendef}

\subsection{\zcmd{prodTopSp}}

Let $(X, \tau) \prodTop (Y, \sigma)$ denote the product topological space.

\begin{gendef}[X,Y]
	\_ \prodTopSp \_: topSpace[X] \cross topSpace[Y] \fun topSpace[X \cross Y]
\where
	\forall \tau: top[X]; \sigma: top[Y] @ \\
	\t1	(X, \tau) \prodTopSp (Y, \sigma) = (X \cross Y, \tau \prodTop \sigma)
\end{gendef}

\printbibliography

\end{document}\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mathz-groups}[2025/01/28 Z Notation for groups package]

\RequirePackage{amsmath}

% variables used for mathematical structures - maybe complete this list and move to the core
\newcommand{\strucA}{\mathbf{A}}
\newcommand{\strucB}{\mathbf{B}}
\newcommand{\strucC}{\mathbf{C}}
\newcommand{\strucS}{\mathbf{S}}


% group identity elements
\newcommand{\oneG}{1}
\newcommand{\zeroG}{0}

% infix generic group-like product operator
%%inop \opG \opS 4
\newcommand{\opG}{\mathbin{\cdot}}
\newcommand{\opS}{\mathbin{\centerdot}}

% infix multiplicative group product operators
%%inop \mulG \timesG \circG 4
\newcommand{\mulG}{\mathbin{*}}
\newcommand{\timesG}{\mathbin{\times}}
\newcommand{\circG}{\mathbin{\circ}}

% infix additive group product operator
%%inop \addG 3
\newcommand{\addG}{\mathbin{+}}

% prefix additive group inverse operator
\DeclareMathOperator{\negG}{-}

% infix additive group subtraction operator
%%inop \subG 3
\newcommand{\subG}{\mathbin{-}}
\documentclass{amsart}

\usepackage{mathz-core}
\usepackage{mathz-sets}
\usepackage{mathz-integers}
\usepackage{mathz-groups}

\usepackage{mathz-preamble}

\addbibresource{mathz-references.bib}

\begin{document}

\title{Groups}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
	This article formalizes groups and related group-like algebraic structures using 
	\ZN\ and has been type checked by \fuzz.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

Groups are ubiquitous in mathematics and physics.
This article formalizes groups and related group-like algebraic structures using 
\ZN\cite{spivey-zrm}.
It has been type checked by \fuzz\cite{spivey-fm}.

\section{Group-Like Algebraic Structures}

In general, an \textit{algebraic structure} consists of a set of elements 
equipped with one or more operations defined on them.
A group is an algebraic structure equipped with one binary operation, typically referred to
as its \textit{product} or \textit{group law}.

Magmas, semigroups, monoids, and abelian groups are 
algebraic structures that are like groups but differ from them 
in terms of the properties imposed on their product operation.

\subsection{Carrier}

The underlying set of an algebraic structure is sometimes referred to as its \textit{carrier}.
When writing informal mathematics, 
it is normally unnecessary to distinguish between a structure and its carrier
since the intended meaning is usually clear from context.
For example, consider the following statement:
\begin{quote}
	Let $G$ be a group and let $g$ be an element of $G$.
\end{quote}
Here the first instance of $G$ stands for the structure while the second stands for its carrier.

However, a set of elements may have more than one structure in a given context.
For example, the set of integers has both additive and multiplicative structures.
In such cases it may be ambiguous if only the carrier is specified.
Furthermore, if the mathematics is expressed using a formal language such as \ZN, 
distinct mathematical objects
must be referred to using distinct names or expressions.

In order to distinguish between structures and their carriers, 
this article adopts the common mathematical practice of defining structures as \textit{tuples}
consisting of a carrier together with one or more additional objects such as operations or
distinguished elements.

When introducing variables to refer to structures and their carriers,
we'll use some typographical convention such as bold font to relate the two.
For example, the structure $\strucA$ has carrier $A$.

\subsection{Genericity}

In general, the definition of a structure does not depend on the concrete type
of its carrier.
Instead, the definition of a structure is usually given in terms of one or more \textit{generic} parameter
that stand for arbitrary sets.
We symbols like $\genT, \genU,$  and $\genV$ to stand for arbitrary sets. 

Let $\genT$ be a set and let $A$ be a subset of it.
We say that a structure $\strucA$ with carrier $A$ is a \textit{structure in} $\genT$.
If $A$ coincides with $\genT$ we say that $\strucA$ is a \textit{structure on} $\genT$
or a \textit{structure over} $\genT$.
Note that a structure on or over $\genT$ is also a structure in $\genT$.

\section{Binary Operations}

\subsection{Partial Binary Operations}

A \textit{partial binary operation} on a set $\genT$ maps some subset of pairs of elements to other elements.

\begin{zed}
	PBinOp[\genT] == \genT \cross \genT \pfun \genT
\end{zed}

\begin{example}[Integer Division and Modulus]

Integer division and modulus are partial binary operations on $\num$ since division or modulus by $0$ is
undefined.

\begin{zed}
	(\_ \div \_) \in PBinOp[\num]
\also
	(\_ \mod \_) \in PBinOp[\num]
\end{zed}

\end{example}

\subsection{Total Binary Operations}

A \textit{total binary operation}, or simply a \textit{binary operation}, is a partial binary operation defined on
every pair of elements.

\begin{zed}
	BinOp[\genT] == \genT \cross \genT \fun \genT
\end{zed}

\begin{remark} Every binary operation is a partial binary operation.

\begin{zed}
	BinOp[\setT] \subseteq PBinOp[\setT]
\end{zed}

\end{remark}

\begin{example}[Integer Addition, Subtraction, and Multiplication]

Integer addition, subtraction, and multiplication are binary operations on $\num$.

\begin{zed}
	(\_ + \_) \in BinOp[\num]
\also
	(\_ - \_) \in BinOp[\num]
\also
	(\_ * \_) \in BinOp[\num]
\end{zed}

\end{example}

\section{Magmas}

\subsection{Magmas}

A \textit{magma} is a set $A$ equipped with a total binary operation, 
generically referred to as a \textit{product}.
Let $x \opG y$ denote the product of $x$ and $y$.
Regarded as a structure $\strucA$, a magma is a pair $(A, (\_ \opG \_))$.

\begin{schema}{Magma}[\genT]
	A: \power \genT \\
	\_ \opG \_: PBinOp[\genT] \\
	\strucA: \power \genT \cross PBinOp[\genT]
\where
	(\_ \opG \_) \in BinOp[A]
\also
	\strucA = (A, (\_ \opG \_))
\end{schema}

\begin{itemize}
	\item The product is a binary operation on $A$.
	\item The structure is the pair consisting of the carrier and the binary operation.
\end{itemize}

Let $magma[\genT]$ be the set of all magmas in $\genT$.
\begin{zed}
	magma[\genT] == \{~ Magma[\genT] @ \strucA ~\}
\end{zed}

\begin{remark}
Every magma is a magma on its carrier.

\begin{zed}
	\forall Magma[\setT] @ \strucA \in magma[A]
\end{zed}

\end{remark}

\begin{example}[Integer Addition]

Let $int\_add$ be the set of integers equipped with addition.
\begin{zed}
	int\_add == (\num, (\_ + \_))
\end{zed}

Integer addition is a magma on $\num$.
\begin{zed}
	int\_add \in magma[\num]
\end{zed}
\end{example}

\begin{example}[Integer Subtraction]

Let $int\_sub$ be the set of integers equipped with subtraction.

\begin{zed}
	int\_sub == (\num, (\_ - \_))
\end{zed}

Integer subtraction is a magma on $\num$.

\begin{zed}
	int\_sub \in magma[\num]
\end{zed}

\end{example}

\begin{example}[Integer Multiplication]

Let $int\_mul$ be the set of integers equipped with multiplication.

\begin{zed}
	int\_mul == (\num, (\_ * \_))
\end{zed}

Integer multiplication is a magma on $\num$.

\begin{zed}
	int\_mul \in magma[\num]
\end{zed}

\end{example}

\subsection{Magma Homomorphisms}

Let $A$ and $A'$ be a magmas and let $f$ be a map from $A$ to $A'$.
We refer to $A$ as the \textit{domain} of the map and $A'$ as its \textit{codomain}.
Alternatively, we refer to $A$ as the \textit{source} of the map and $A'$ its \textit{target}.

Just as magmas are structures, so also are magma maps.
A \textit{magma map} is a pair of magmas $(\strucA, \strucA')$
and a map $f$ between their carriers.

Recall that we may informally use the same name, say $A$, to refer to both a magma and its carrier.
Similarly, we may informally use the same name, say $f$, to refer to both a magma map structure and its
underlying map of the carriers.
When we need to distinguish between the map structure and its underlying map,
we'll use some typographic convention to relate the two.
For example, we may use $F$ for the structure and $f$ for its underlying map.
In any case, the formal text will always use distinct names in any given context.

\begin{schema}{Magma\_Map}[\genT, \genU]
	Magma[\genT] \\
	Magma'[\genU] \\
	f: \genT \pfun \genU \\
	F: (magma[\genT] \cross magma[\genU]) \cross (\genT \pfun \genU)
\where
	f \in A \fun A'
\also
	F = (\strucA, \strucA') \mapsto f
\end{schema}

\begin{itemize}
	\item $f$ maps $A$ to $A'$
	\item A magma map structure consists of a pair of magmas and a map between their carriers.
\end{itemize}

Let $magma\_map[\genT, \genU]$ be the set of all magma maps
from magmas in $\genT$ to magmas in $\genU$.

\begin{zed}
	magma\_Map[\genT, \genU] == \{~ Magma\_Map[\genT, \genU] @ F ~\}
\end{zed}

A magma map $f$ is a \textit{magma homomorphism} if it preserves products.

\begin{schema}{Magma\_Hom}[\genT, \genU]
	Magma\_Map[\genT, \genU]
\where
	\forall x, y: A @ f(x \opG y) = f(x) \opG' f(y)
\end{schema}

\begin{itemize}
	\item $f$ preserves the product operation
\end{itemize}

Let $magma\_Hom[\genT, \genU]$ be the set of all homomorphisms
from magmas in $\genT$ to magmas in $\genU$.

\begin{zed}
	magma\_Hom[\genT, \genU] == \{~Magma\_Hom[\genT, \genU] @ F ~\}
\end{zed}

Let $magma\_hom(\strucA, \strucA')$ be the subset of $magma\_Hom[\genT, \genU]$ 
that consists of all homomorphisms from $\strucA$ to $\strucA'$.

\begin{zed}
	magma\_hom[\genT, \genU] == \\
	\t1	(\lambda \strucA: magma[\genT]; \strucA': magma[\genU] @ \\
	\t2		\{(\strucA, \strucA') \} \dres magma\_Hom[\genT, \genU])
\end{zed}

\begin{remark} $magma\_hom(\strucA, \strucA')$ is a subset of $magma\_Hom$.

\begin{zed}
	\forall Magma\_Hom[\setT, \setU] @ \\
	\t1	magma\_hom(\strucA, \strucA') \subseteq magma\_Hom[\setT, \setU]
\end{zed}

\end{remark}

\begin{example}[The Identity Map]

The identity map is a homomorphism.

\begin{schema}{Magma\_Id}[\genT]
	Magma\_Map[\genT, \genT]
\where
	\strucA' = \strucA
\also
	f = \id A
\end{schema}

\begin{zed}
	\forall Magma\_Id[\setT] @ \\
	\t1	Magma\_Hom[\setT, \setT]
\end{zed}

\end{example}

\begin{example}[Multiplication by a Fixed Integer]

Multiplication by a fixed integer $c$ maps $\num$ to $\num$ and preserves addition.

\begin{schema}{MulConst}
	Magma\_Map[\num, \num] \\
	c: \num
\where
	\strucA = \strucA' = int\_add
\also
	f = (\lambda x: \num @ c * x)
\end{schema}

Therefore this map is a homomorphism.

\begin{zed}
	\forall MulConst @ \\
	\t1	Magma\_Hom[\num, \num]
\end{zed}

\begin{proof}
\begin{zed}
	\forall c, x, y: \num @ \\
	\t1	c * (x + y) = c * x + c * y
\end{zed}
\end{proof}

\end{example}

\begin{example}[Exponentiation by a Fixed Natural Number]

Exponentiation by a fixed natural number $n$ maps $\num$ to $\num$ and preserves multiplication.

\begin{schema}{ExpConst}
	Magma\_Map[\num, \num] \\
	n: \nat
\where
	\strucA = \strucA' = int\_mul
\also
	f = (\lambda x: \num @ x \expN n)
\end{schema}

Therefore this map is a homomorphism.

\begin{zed}
	\forall ExpConst @ \\
	\t1	Magma\_Hom[\num, \num]
\end{zed}

\begin{proof}
\begin{zed}
	\forall n: \nat; x, y: \num @ \\
	\t1	(x * y) \expN n = x \expN n * y \expN n
\end{zed}
\end{proof}

\end{example}

\subsection{Subsets}

Given a subset $S$ of the elements of a magma $A$ we can
restrict the product $x \opG y$ to pairs in $S$.
Let $x \opS y$ denote the restriction of the product to $S$.
We get a new structure $\strucS = (S, (\_ \opS \_))$ which may or may not
itself be a magma depending on whether or not $S$ is closed under the product.

\begin{schema}{Magma\_Subset}[\genT]
	Magma[\genT] \\
	S: \power \genT \\
	\_ \opS \_: PBinOp[\genT] \\
	\strucS: \power \genT \cross PBinOp[\genT]
\where
	S \subseteq A
\also
	(\_ \opS \_) = (S \cross S) \dres (\_ \opG \_)
\also
	\strucS = (S, (\_ \opS \_))
\end{schema}

\subsection{Submagmas}

A subset $S$ of a magma is a \textit{submagma} if the product of any pair of elements of $S$ 
is an element of $S$.

\begin{schema}{Submagma}[\genT]
	Magma\_Subset[\genT]
\where
	\forall x, y: S @ x \opS y \in S
\end{schema}

\subsection{Images}

The \textit{image} of a magma homomorphism consists of the image of the map
and the product restricted to those elements.

\begin{schema}{Magma\_Image}[\genT, \genU]
	Magma\_Hom[\genT, \genU] \\
	Magma\_Subset'[\genU]
\where
	S' = f \limg A \rimg
\end{schema}

\begin{remark}
The image of a magma homomorphism is a submagma of its target.

\begin{zed}
	\forall Magma\_Image[\setT, \setU] @ Submagma'[\setU]
\end{zed}

\begin{proof}
It suffices to show that the product of any two elements $x', y'$ in the image $S'$ is 
also in $S'$. By definition of the image, there exists elements $x$ and $y$ in $A$
such that $x' = f(x)$ and $y' = f(y)$.
Therefore $x' \opS' y' = f(x) \opS' f(y) = f(x \opG y)$ which is clearly in the image of $f$. 
\end{proof}

\end{remark}

Let $magma\_im$ be the function that maps a magma homomorphism to its image.

\begin{zed}
	magma\_im[\genT, \genU] == \{~ Magma\_Image[\genT, \genU] @ F \mapsto \strucS' ~\}
\end{zed}

\subsection{Composition}

Let $f$ be a homomorphism from $A$ to $A'$ and let $f'$ be a homomorphism from $A'$ to $A''$.
The function composition $g = f' \circ f$ is a map from $A$ to $A''$.

\begin{schema}{Magma\_Composition}[\genT, \genU, \genV]
	Magma\_Hom[\genT, \genU] \\
	Magma\_Hom'[\genU, \genV] \\
	g: \genT \pfun \genV  \\
	G: magma\_Map[\genT, \genV]
\where
	g = f' \circ f
\also
	G = (\strucA, \strucA'') \mapsto g
\end{schema}

\begin{remark}
The composition of two magma homomorphisms is a magma homomorphism.

\begin{zed}
	\forall Magma\_Composition[\setT, \setU, \setV] @ \\
	\t1	G \in magma\_hom(\strucA, \strucA'')
\end{zed}

\end{remark}

Let $G = F' \circG F$ denote the composition of magma homomorphisms.

\begin{zed}
	(\_ \circG \_)[\genT, \genU, \genV] == \{~ Magma\_Composition[\genT, \genU, \genV] @ (F', F) \mapsto G ~\}
\end{zed}

\section{Semigroups}

\subsection{Associativity}

A magma is said to be \textit{associative} if the result of applying its operation to any three elements
is independent of the order in which it is applied pairwise.

\begin{schema}{Associative}[\genT]
	Magma[\genT]
\where
	\forall x, y, z: A @ \\
	\t1	x \opG y \opG z = x \opG (y \opG z)
\end{schema}

\subsection{Semigroups}

An associative magma is called a \textit{semigroup}.

\begin{schema}{Semigroup}[\genT]
	Associative[\genT]
\end{schema}

Let $semigroup[\genT]$ denote the set of all semigroups in $\genT$.

\begin{zed}
	semigroup[\genT] == \{~ Semigroup[\genT] @ \strucA  ~\}
\end{zed}

\begin{remark} Every semigroup is a magma.

\begin{zed}
	semigroup[\setT] \subseteq magma[\setT]
\end{zed}

\end{remark}

\begin{example}[Sequence Concatenation]
Finite sequences in $\genT$ with the operation of concatenation form a semigroup
since concatenation is associative.

\begin{schema}{SequenceConcat}[\genT]
	Magma[\seq \genT]
\where
	A = \seq \genT
\also
	\forall x, y: A @ x \opG y = x \cat y
\end{schema}

\begin{zed}
	\forall SequenceConcat[\setT] @ \strucA \in semigroup[\seq \setT]
\end{zed}

\end{example}

\subsection{Homomorphisms}

A \textit{semigroup homomorphism} is a homomorphism of the underlying magmas.

\begin{schema}{Semigroup\_Hom}[\genT, \genU]
	Magma\_Hom[\genT, \genU]
\where
	\strucA \in semigroup[\genT]
\also
	\strucA' \in semigroup[\genU]
\end{schema}

\begin{itemize}
	\item $\strucA$ is a semigroup in $\genT$
	\item $\strucA'$ is a semigroup in $\genU$
\end{itemize}

Let $semigroup\_Hom[\genT, \genU]$ be the set of all homomorphisms from semigroups in $\genT$ to
semigroups in $\genU$.

\begin{zed}
	semigroup\_Hom[\genT, \genU] == \{~ Semigroup\_Hom[\genT, \genU] @ F ~\}
\end{zed}

Let $semigroup\_hom(\strucA, \strucA')$ be the subset of semigroup homomorphisms from $\strucA$ to $\strucA'$.

\begin{zed}
	semigroup\_hom[\genT, \genU] == \\
	\t1	(\lambda \strucA: semigroup[\genT]; \strucA': semigroup[\genU] @ \\
	\t2		\{~ (\strucA, \strucA') ~\} \dres semigroup\_Hom[\genT, \genU])
\end{zed}

\begin{remark}
The identity mapping of a semigroup to itself is a semigroup homomorphism.

\begin{zed}
	\forall Magma\_Id[\setT] @ \\
	\t1	\strucA \in semigroup[\setT] \implies \\
	\t2		Semigroup\_Hom[\setT, \setT]
\end{zed}

\end{remark}

\begin{remark}
Every magma homomorphism of semigroups is a semigroup homomorphism.

\begin{zed}
	\forall Magma\_Hom[\setT, \setU] @ \\
	\t1 \strucA \in semigroup[\setT] \land \strucA' \in semigroup[\setU] \implies \\
	\t2		F \in semigroup\_hom(\strucA, \strucA')
\end{zed}

\end{remark}

\begin{remark}
If $F$ is magma homomorphism from $\strucA$ to $\strucA'$ and $\strucA$ is a semigroup
then the image of $F$ is a semigroup.

\begin{zed}
	\forall Magma\_Hom[\setT, \setU] @ \\
	\t1	\strucA \in semigroup[\setT] \implies magma\_im(F) \in semigroup[\setU]
\end{zed}

\end{remark}

\subsection{Composition}

Consider the composition of semigroup homomorphisms.

\begin{schema}{Semigroup\_Composition}[\genT, \genU, \genV]
	Magma\_Composition[\genT, \genU, \genV] \\
	Semigroup[\genT] \\
	Semigroup'[\genU]
\end{schema}

\begin{remark}
The composition of semigroup homomorphisms is a semigroup homomorphism.

\begin{zed}
	\forall Semigroup\_Composition[\setT, \setU, \setV] @ \\
	\t1	G \in semigroup\_hom(\strucA, \strucA'')
\end{zed}

\end{remark}

\section{Monoids}

\subsection{Identity Elements}

Let $\strucA$ be a magma and let $e$ be an element of $A$.
The element $e$ is said to be an \textit{identity element} of $\strucA$ if left and right 
products with it leave all elements unchanged.

\begin{schema}{IdentityElement}[\genT]
	Magma[\genT] \\
	e: \genT
\where
	e \in A
\also
	\forall x: A @ e \opG x = x = x \opG e
\end{schema}

Clearly, not all magmas have identity elements.
For example, consider the set of even integers under multiplication.
However, if a magma has an identity element, then it is unique.
This will be proved next.

Let $identity\_element$ denote the relation between magmas and their identity elements.

\begin{zed}
	identity\_element[\genT] == \\
	\t1	\{~ IdentityElement[\genT] @ \strucA \mapsto e ~\}
\end{zed}

\begin{remark}

\begin{zed}
	identity\_element[\setT] \in magma[\setT] \rel \setT
\end{zed}

\end{remark}

Consider the case of a magma $\strucA$ that has, possibly distinct, identity elements $e, e'$.

\begin{schema}{IdentityElements}[\genT]
	Magma[\genT] \\
	e, e': \genT
\where
	\strucA \mapsto e \in identity\_element[\genT]
\also
	\strucA \mapsto e' \in identity\_element[\genT]
\end{schema}

\begin{remark}
If a magma has an identity element then it is unique.

\begin{zed}
	\forall IdentityElements[\setT] @ \\
	\t1	e = e'
\end{zed}

\begin{proof}
\begin{argue}
e \\
\t1	= e \opG e'	& $e'$ is an identity element \\
\t1	= e'			& $e$ is an identity element
\end{argue}
\end{proof}

\end{remark}

\begin{remark}
The preceding remark shows that if an identity element exists then it is unique.
This means that the relation from magmas to identity elements is a partial function.

\begin{zed}
identity\_element[\setT] \in magma[\setT] \pfun \setT
\end{zed}

\end{remark}

Identity elements are typically denoted by the symbol  $\zeroG$ when the operation is thought of as an addition
or the symbol $\oneG$ when the operation is thought of as a multiplication.

\subsection{Monoids}

A \textit{monoid} in $\genT$ is a semigroup in $\genT$ that has an identity element.
\begin{schema}{Monoid}[\genT]
	Semigroup[\genT] \\
	IdentityElement[\genT]
\end{schema}

Let $monoid[\genT]$ be the set of all monoids in $\genT$.
\begin{zed}
	monoid[\genT] == \{~ Monoid[\genT] @ \strucA ~\}
\end{zed}

\begin{remark}
Given a monoid we can recover its identity element by applying the $identity\_element$
function to it.

\begin{zed}
	identity\_element[\setT] \in monoid[\setT] \fun \setT
\end{zed}

\end{remark}

\subsection{Homomorphisms}

Let $\strucA$ and $\strucA'$ be monoids and let $f$ map the elements of $A$ to the elements of $A'$.
The map $f$ is said to \textit{preserve identity elements} if it maps the identity element of $\strucA$
to the identity element of $\strucA'$.

\begin{schema}{MapPreservesIdentity}[\genT, \genU]
	Magma\_Map[\genT, \genU] \\
	Monoid[\genT] \\
	Monoid'[\genU]
\where
	f(e) = e'
\end{schema}

A {\em monoid homomorphism} is a homomorphism of the underlying semigroups
that preserves identity.

\begin{schema}{Monoid\_Hom}[\genT, \genU]
	Semigroup\_Hom[\genT, \genU] \\
	 MapPreservesIdentity[\genT, \genU]
\end{schema}

Let $monoid\_Hom[\genT, \genU]$ be the set of all homomorphisms from monoids in $\genT$
to monoids in $\genU$.

\begin{zed}
	monoid\_Hom[\genT, \genU] == \{~ Monoid\_Hom[\genT, \genU] @ F ~\}
\end{zed}

Let $monoid\_hom(\strucA, \strucA')$ denote the set of all monoid homomorphisms from $\strucA$ to $\strucA'$.

\begin{zed}
	monoid\_hom[\genT, \genU] == \\
	\t1	(\lambda \strucA: monoid[\genT]; \strucA': monoid[\genU] @ \\
	\t2		\{~ (\strucA, \strucA') ~\} \dres monoid\_Hom[\genT, \genU])
\end{zed}

\begin{remark}
The identity mapping is a monoid homomorphism.
\end{remark}

\begin{remark}
The composition of two monoid homomorphisms is another monoid homomorphism.
\end{remark}

\section{Groups}

\subsection{Inverse Operations}

Let $\strucA$ be a magma that has an identity element.
A unary operation $inv$ on $A$ is said to be an \textit{inverse operation} if it maps each element
to an element whose product with it is the identity element.

\begin{schema}{InverseOperation}[\genT]
	IdentityElement[\genT] \\
	inv: \genT \pfun \genT
\where
	inv \in A \fun A
\also
	\forall x: A @ x \opG (inv~x) = e = (inv~x)  \opG x
\end{schema}

Let $inverse\_operation$ denote the relation between magmas and their inverse operations.
\begin{zed}
	inverse\_operation[\genT] == \\
	\t1	\{~ InverseOperation[\genT] @ \strucA \mapsto inv ~\}
\end{zed}

\begin{remark}
If a monoid has an inverse operation then it is unique.
\end{remark}

\begin{schema}{InverseOperations}[\genT]
	Monoid[\genT] \\
	inv, inv': \genT \pfun \genT
\where
	(\strucA, inv) \in inverse\_operation[\genT]
\also
	(\strucA, inv') \in inverse\_operation[\genT]
\end{schema}

\begin{zed}
	\forall InverseOperations[\setT] @ inv = inv'
\end{zed}

\begin{proof}
Suppose $inv$ and $inv'$ are inverse operations.
Let $x$ be any element.
\begin{argue}
inv'~x \\
\t1	= (inv'~x) \opG e					& $e$ is an identity element \\
\t1	= (inv'~x) \opG (x \opG (inv~x))			& $inv~x$ is an inverse of $x$ \\
\t1	= ((inv'~x) \opG x) \opG (inv~x)			& associativity \\
\t1	= e \opG (inv~x)					& $inv'~x$ is an inverse of $x$ \\
\t1	= inv~x							& $e$ is an identity element
\end{argue}
\end{proof}

\begin{remark}
Since inverse operations are unique if exist they, the relation between monoids and inverse operations
is a partial function.

\begin{zed}
	inverse\_operation[\setT] \in monoid[\setT] \pfun \setT \pfun \setT
\end{zed}

\end{remark}

\subsection{Groups}

A \textit{group} is a monoid that has an inverse operation.
\begin{schema}{Group}[\genT]
	Monoid[\genT] \\
	InverseOperation[\genT]
\end{schema}

Let $group[\genT]$ be the set of all groups in $\genT$.
\begin{zed}
	group[\genT] == \{~ Group[\genT] @ \strucA ~\}
\end{zed}

\subsection{Homomorphisms}

Let $\strucA$ and $\strucA'$ be groups and let $F$ be a monoid homomorphism. 
The map $f$ is said to \textit{preserve inverses} if it maps the inverses to the inverses.
A \textit{group homomorphism} is a monoid homomorphism that preserves inverses.

\begin{schema}{Group\_Hom}[\genT, \genU]
	Monoid\_Hom[\genT, \genU] \\
	Group[\genT] \\
	Group'[\genU]
\where
	\forall x: A @ f(inv~x) = inv'(f~x)
\end{schema}

Let $group\_Hom[\genT, \genU]$ be the set of all group homomorphisms.

\begin{zed}
	group\_Hom[\genT, \genU] == \{~ Group\_Hom[\genT, \genU] @ F ~\}
\end{zed}

Let $group\_hom(\strucA, \strucA')$ denote the set of all group homomorphisms from $\strucA$ to $\strucA'$.

\begin{zed}
	group\_hom[\genT, \genU] == \\
	\t1	(\lambda \strucA: group[\genT]; \strucA': group[\genU] @ \\
	\t2		\{~ (\strucA, \strucA') ~\} \dres group\_Hom[\genT, \genU])
\end{zed}

\begin{example}[Identity]

The identity mapping is a group homomorphism.

\begin{zed}
	\forall Magma\_Id[\setT] @ F \in group\_hom(\strucA, \strucA)
\end{zed}

\end{example}

\subsection{Composition}

Consider the composition of two group homomorphisms.

\begin{schema}{Group\_Composition}[\genT, \genU, \genV]
	Magma\_Composition[\genT, \genU, \genV] \\
	Group\_Hom[\genT, \genU] \\
	Group\_Hom'[\genU, \genV]
\end{schema}

\begin{remark}
The composition of two group homomorphisms is another group homomorphism.

\begin{zed}
	\forall Group\_Composition[\setT, \setU, \setV] @ G \in group\_Hom[\setT, \setV]
\end{zed}

\end{remark}

\subsection{Bijections}

Let $bij[\genT]$ denote the set of all bijections from $\genT$ to itself.

\begin{zed}
	bij[\genT] == \genT \bij \genT
\end{zed}

Let $Bij[\genT]$ be the structure whose carrier is $bij[\genT]$ and
whose product is composition.

\begin{zed}
	Bij[\genT] == (bij[\genT], (\lambda f, g: bij[\genT] @ g \circ f))
\end{zed}

\begin{remark}
The composition of bijections is a bijection.

\begin{zed}
	\forall f, g: bij[\setT] @ \\
	\t1	f \circ g \in bij[\setT]
\end{zed}

Since bijections are closed under composition, $Bij[\genT]$ is a magma.

\begin{zed}
	Bij[\setT] \in magma[bij[\setT]]
\end{zed}
	
\end{remark}

\begin{remark}
Composition is associative.

\begin{zed}
	\forall f, g, h: bij[\setT] @ \\
	\t1	f \circ (g \circ h) = (f \circ g) \circ h
\end{zed}

Since composition is associative, $Bij[\genT]$ is a semigroup.

\begin{zed}
	Bij[\setT] \in semigroup[bij[\setT]]
\end{zed}

\end{remark}

\begin{remark}
The identity function $\id \genT$ is an identity element for $Bij[\genT]$.

\begin{zed}
	\forall f: bij[\setT] @ \\
	\t1	 \id \setT \circ f = f = f \circ \id \setT
\end{zed}

Since $Bij[\genT]$ has an identity element, it is a monoid.

\begin{zed}
	Bij[\setT] \in monoid[bij[\setT]]
\end{zed}

\end{remark}

\begin{remark}
The relational inverse $f \inv$ of a bijection $f$ is its inverse under composition.

\begin{zed}
	\forall f: bij[\setT] @ \\
	\t1	f \circ f \inv = \id \setT = f \inv \circ f
\end{zed}

Since $Bij[\genT]$ has an inverse operation, it is a group.

\begin{zed}
	Bij[\setT] \in group[bij[\setT]]
\end{zed}

\end{remark}

\section{Abelian Groups}

\subsection{Commutativity}

A magma $\strucA$ in $\genT$ is said to be {\em commutative} when the product of two elements doesn't depend on 
their order.
\begin{schema}{Commutative}[\genT]
	Magma[\genT]
\where
	\forall x, y: A @ x \opG y = y \opG x
\end{schema}

\subsection{Abelian Groups}

An \textit{abelian group} is a group in which the product is commutative.

\begin{schema}{AbelianGroup}[\genT]
	Group[\genT] \\
	Commutative[\genT]
\end{schema}

Let $abgroup[\genT]$ denote the set of all abelian groups in $\genT$.
\begin{zed}
	abgroup[\genT] == \{~ AbelianGroup[\genT] @ \strucA ~\}
\end{zed}

Often in an abelian group the binary operation is denoted as addition $x \addG y$,
the identity element as a zero $\zeroG$, and the inverse operation as negation $\negG x$.

\begin{example}[Integer Addition]
Addition over the integers is an abelian group.

\begin{zed}
	(\num, (\_ + \_)) \in abgroup[\num]
\end{zed}

\end{example}

\subsection{Homomorphisms}

A homomorphism of abelian groups is a homomorphism of the underlying groups.

\begin{schema}{AbelianGroup\_Hom}[\genT, \genU]
	Group\_Hom[\genT, \genU] \\
	Group[\genT] \\
	Group'[\genU]
\end{schema}

Let $abgroup\_Hom[\genT, \genU]$ be the set of all abelian group homomorphisms
from abelian groups in $\genT$ to abelian groups in $\genU$.

\begin{zed}
	abgroup\_Hom[\genT, \genU] == \{~ AbelianGroup\_Hom[\genT, \genU] @ F ~\}
\end{zed}

Let $abgroup\_hom(\strucA, \strucA')$ be the subset of abelian group homomorphisms
from $\strucA$ to $\strucA'$.

\begin{zed}
	abgroup\_hom[\genT, \genU] == \\
	\t1	(\lambda \strucA: abgroup[\genT]; \strucA': abgroup[\genU] @ \\
	\t2		\{~ (\strucA, \strucA') ~\} \dres abgroup\_Hom[\genT, \genU])
\end{zed}

\printbibliography

\end{document}\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mathz-real-numbers}[2018/08/05 Z Notation for real numbers package]

\RequirePackage{amssymb}

% real numbers

% the set of real numbers
\newcommand{\R}{\mathbb{R}}

% the real number 0
\newcommand{\zeroR}{0}

% the real number 1
\newcommand{\oneR}{1}

% the real number 2
\newcommand{\twoR}{2}

% the negation prefix operator -x
\DeclareMathOperator{\negR}{-}

% the set of nonzero real numbers
\newcommand{\Rnz}{\R_{*}}

% the set of positive real numbers
\newcommand{\Rpos}{\R_{+}}

% the set of negative real numbers
\newcommand{\Rneg}{\R_{-}}

% the set of less than zero real numbers
\newcommand{\Rltz}{\R_{< 0}}

% the set of less than or equal to zero real numbers
\newcommand{\Rlez}{\R_{\leq 0}}

% the set of greater than or equal to zero real numbers
\newcommand{\Rgez}{\R_{\geq 0}}

% the set of greater than zero real numbers
\newcommand{\Rgtz}{\R_{> 0}}

% the addition infix operator x + y
%%inop \addR 3
\newcommand{\addR}{\mathbin{+}}

% the subtraction infix operator x - y
%%inop \subR 3
\newcommand{\subR}{\mathbin{-}}

% the multiplication infix operator x * y
%%inop \mulR 4
\newcommand{\mulR}{\mathbin{*}}

% the division infix operator x / y
%%inop \divR 4
\newcommand{\divR}{\mathbin{/}}

% the multiplication infix operator restricted to non-zero real numbers
%%inop \mulRnz 4
\newcommand{\mulRnz}{\mathbin{*}}

% the inverse postfix operator defined on non-zero real numbers
%%postop \invRnz
\newcommand{\invRnz}{^{-1}}

% the less than infix relation x < y
%%inrel \ltR
\newcommand{\ltR}{\mathrel{<}}

% the less than or equal to infix relation x <= y
%%inrel \leR
\newcommand{\leR}{\mathrel{\leq}}

% the greater than infix relation x > y
%%inrel \gtR
\newcommand{\gtR}{\mathrel{>}}

% the greater than or equal to infix relation x > y
%%inrel \geR
\newcommand{\geR}{\mathrel{\geq}}

% sum of a sequence of real numbers
\newcommand{\sumR}{\Sigma}

% the set of all open sets of real numbers
\newcommand{\openR}{\mathsf{open}}

% the absolute value function abs(x) = |x|
\DeclareMathOperator{\absR}{abs}

% the positive square root function sqrt(x)
\DeclareMathOperator{\sqrtR}{sqrt}

\DeclareMathOperator{\intervalR}{interval}
\DeclareMathOperator{\ballR}{ball}
\DeclareMathOperator{\ballsR}{balls}
\DeclareMathOperator{\neighR}{neigh}

\newcommand{\tauR}{\tau_\R}
\newcommand{\Rtau}{\R_\tau}

\DeclareMathOperator{\limRR}{lim}
\DeclareMathOperator{\limR}{lim}
\DeclareMathOperator{\limFR}{lim}

\DeclareMathOperator{\FunR}{F}
\DeclareMathOperator{\FunPR}{F}

\DeclareMathOperator{\CzeroR}{C^0}
\DeclareMathOperator{\CzeroPR}{C^0}

\DeclareMathOperator{\CnR}{C}
\DeclareMathOperator{\CnPR}{C}

\DeclareMathOperator{\diffRR}{diff}
\DeclareMathOperator{\diffR}{diff}
\DeclareMathOperator{\diffPR}{diff}

\DeclareMathOperator{\smoothR}{C^{\infty}}
\DeclareMathOperator{\smoothPR}{C^{\infty}}

\DeclareMathOperator{\derivFR}{D}
\DeclareMathOperator{\derivF}{D}

\DeclareMathOperator{\asZR}{\mathsf{real}}

\DeclareMathOperator{\sinR}{sin}
\DeclareMathOperator{\cosR}{cos}
\DeclareMathOperator{\tanR}{tan}
\DeclareMathOperator{\expR}{exp}
\DeclareMathOperator{\logR}{log}
\newcommand{\piR}{\pi}

% the multiplication infix operator x * y for integers times reals
%%inop \mulZR 4
\newcommand{\mulZR}{\mathbin{*}}

% the division infix operator x / y for reals divided by integers
%%inop \divRZ 4
\newcommand{\divRZ}{\mathbin{/}}

% the real plane
\newcommand{\Rtwo}{\R^2}

% the origin of the real plane
\newcommand{\zeroRtwo}{\mathbf{0}}

% addition of points in the real plane
%%inop \addRtwo 3
\newcommand{\addRtwo}{\mathbin{+}}

% scalar multiplication of points in the real plane
%%inop \smulRtwo 4
\newcommand{\smulRtwo}{\mathbin{*}}

% scalar multiplication of points in the real plane by an integer
%%inop \smulZRtwo 4
\newcommand{\smulZRtwo}{\mathbin{*}}

% sum of a sequence of points in the real plane
\newcommand{\sumRtwo}{\Sigma}

% addition of functions to the real plane
%%inop \addFRtwo 3
\newcommand{\addFRtwo}{\mathbin{+}}

% the real 3-space
\newcommand{\Rthree}{\R^3}

% dot product of points in the real plane
%%inop \dotRtwo 4
\newcommand{\dotRtwo}{\mathbin{\cdot}}

% the norm of a point in the real plane
\DeclareMathOperator{\normRtwo}{norm}

% the unit sphere in the real plane
\newcommand{\sphereOne}{S^1}

% the unit sphere in real space
\newcommand{\sphereTwo}{S^2}
