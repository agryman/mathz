%
% fuzzlib.x
%
% This file is part of fuzz2000
% Copyright (c) 1982--2006 J. M. Spivey
% All rights reserved
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice,
%    this list of conditions and the following disclaimer.
% 2. Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
% 3. The name of the author may not be used to endorse or promote products
%    derived from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
% IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
% OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
% IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
% OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
% WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
% OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
% ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% 
% $Id: fuzzlib.x,v 1.2 2007-02-16 12:45:13 mike Exp $
%

%%token $"\bind" 335
%%token $"\bsup" 262
%%token $"\cross" 266
%%token $"\defs" 268
%%token $"\ELSE" 333
%%token $"\esup" 275
%%token $"\exists" 277
%%token $"\exists_1" 278
%%token $"false" 280
%%token $"\forall" 282
%%token $"\hide" 284
%%token $"\iff" 273
%%token $"\IF" 331
%%token $"\implies" 285
%%token $"\in" 286
%%token $"\inrel" 329
%%token $"\lambda" 289
%%token $"\land" 258
%%token $"\langle" 334
%%token $"\lbag" 290
%%token $"\ldata" 291
%%token $"\LET" 292
%%token $"\limg" 293
%%token $"\lnot" 296
%%token $"\lor" 298
%%token $"\mid" 124
%%token $"\mu" 294
%%token $"\pipe" 299
%%token $"\power" 300
%%token $"\pre" 301
%%token $"\project" 302
%%token $"\rangle" 336
%%token $"\rbag" 303
%%token $"\rdata" 304
%%token $"\rimg" 305
%%token $"\semi" 281
%%token $"\spot" 64
%%token $"\THEN" 332
%%token $"\theta" 306
%%token $"true" 307
%%token $"\vdash" 309
%%token $"\where" 310
%%token $"==" 272
%%token $"%%ingen" 312
%%token $"%%inop" 313
%%token $"%%inrel" 314
%%token $"%%pregen" 316
%%token $"%%prerel" 317
%%token $"%%postop" 315
%%token $"%%type" 318
%%token $"%%tame" 319
%%token $"%%pname" 320
%%token $"%%ignore" 338
%%token $"%%debug" 340
%%token $"%%line" 341
%%token $"\begin{axdef}" 259
%%token $"\begin{gendef}" 260
%%token $"\begin{schema}" 261
%%token $"\begin{zed}" 264
%%token $"\begin{syntax}" 263
%%token $"\end{axdef}" 270
%%token $"\end{gendef}" 271
%%token $"\end{schema}" 274
%%token $"\end{zed}" 279
%%token $"\end{syntax}" 276

%%inop \mapsto							1
%%inop \upto							2
%%inop + - \cup \setminus \cat \uplus \uminus			3
%%inop * \div \mod \cap \circ \comp \filter \extract \otimes	4
%%inop \oplus \bcount						5
%%inop \dres \rres \ndres \nrres				6
%%postop \plus \star \inv
%%inrel \neq \notin \subseteq \subset < \leq \geq > \inbag \partition
%%inrel \prefix \subbageq \suffix \inseq
%%prerel \disjoint
%%ingen \rel \fun \pinj \inj \psurj \surj \bij \ffun \finj
%%pregen \power_1 \id \finset \iseq
%%ignore \quad \qquad

%%type \pfun \nat \seq \bag
\begin{gendef}[X]
	\finset \_: \power (\power X)
\end{gendef}
\begin{gendef}[X,Y]
	\_ \rel \_, \_ \ffun \_: \power (\power (X \cross Y)) \\
	\_ \fun \_: \power (X \pfun Y)
\end{gendef}
%%type \rel \ffun \finset

\begin{axdef}
	-: \num \fun \num \\
        \_ + \_ , \_ - \_ , \_ * \_: \num \cross \num \fun \num \\
        \_ \div \_ , \_ \mod \_: 
		\num \cross \num \pfun \num \\
        \_ < \_ , \_ \leq \_ , \_ \geq \_ , \_ > \_: 
		\num \rel \num \\
	\nat_1: \power \nat \\
        succ: \nat \fun \nat \\
	\_ \upto \_: \num \cross \num \fun \power \num \\
        min: \power \num \pfun \num \\
        max: \power \num \pfun \num
\end{axdef}

\begin{gendef}[X]
        \_ \neq \_: X \rel X \\
        \_ \notin \_: X \rel \power X \\
	\empty, \emptyset: \power X \\
	\_ \subseteq \_ , \_ \subset \_: \power X \rel \power X \\
	\power_1 \_: \power (\power X) \\
        \_  \cup \_ , \_ \cap \_ , \_ \setminus \_:
                \power X \cross \power X \fun \power X \\
        \bigcup, \bigcap: \power (\power X) \fun \power X \\
	\id \_: X \rel X \\
        \_\plus, \_\star: (X \rel X) \fun (X \rel X) \\
        iter: \num \fun (X \rel X) \fun (X \rel X) \\
	\finset_1 \_: \power (\finset X) \\
        \#: \finset X \fun \nat \\
	\seq_1 \_, \iseq \_: \power (\seq X) \\
        \_ \cat \_ :  \seq X \cross \seq X \fun \seq X \\
        head, last: \seq X \pfun X \\
        tail, front: \seq X \pfun \seq X \\
        rev: \seq X \fun \seq X \\
        \_ \filter \_: \seq X \cross \power X \fun \seq X \\
        \_ \extract \_: \power \nat \cross \seq X \pfun \seq X \\
	squash: (\nat \ffun X) \pfun \seq X \\
	\_\prefix\_, \_\suffix\_, \_\inseq\_: \seq X \rel \seq X \\
        \dcat: \seq (\seq X) \fun \seq X \\
        count: \bag X \fun (X \fun \nat) \\
	\_\bcount\_: \bag X \cross X \fun \nat \\
        \_ \inbag \_: X \rel \bag X \\
	\_ \subbageq \_: \bag X \rel \bag X \\
        \_ \uplus \_, \_ \uminus \_: \bag X \cross \bag X \fun \bag X \\
	\_ \otimes \_: \nat \cross \bag X \fun \bag X \\
        items: \seq X \fun \bag X
\end{gendef}

\begin{gendef}[X,Y]
        first: X \cross Y \fun X \\
        second: X \cross Y \fun Y \\
        \_ \mapsto \_: X \cross Y \fun X \cross Y \\
        \dom: (X \rel Y) \fun \power X \\
        \ran: (X \rel Y) \fun \power Y \\
        \_ \dres \_: \power X \cross (X \rel Y) \fun (X \rel Y) \\
        \_ \rres \_: (X \rel Y) \cross \power Y \fun (X \rel Y) \\
        \_ \ndres \_: \power X \cross (X \rel Y) \fun (X \rel Y) \\
        \_ \nrres \_: (X \rel Y) \cross \power Y \fun (X \rel Y) \\
        \_\inv: (X \rel Y) \fun (Y \rel X) \\
        \_\limg\_\rimg: (X \rel Y) \cross \power X \fun \power Y \\
        \_ \oplus \_: (X \rel Y) \cross (X \rel Y) \fun (X \rel Y) \\
	\_ \pinj \_, \_ \inj \_, \_ \psurj \_, 
	\_ \surj \_, \_ \bij \_, \_ \finj \_: \power(X \pfun Y) \\
        \disjoint \_: \power (X \pfun \power Y) \\
        \_ \partition \_: (X \pfun \power Y) \rel \power Y
\end{gendef}

\begin{gendef}[X,Y,Z]
        \_ \comp \_: (X \rel Y) \cross (Y \rel Z) \fun (X \rel Z) \\
	\_ \circ \_: (Y \rel Z) \cross (X \rel Y) \fun (X \rel Z)
\end{gendef}

%%pname \pfun $"-+>"
%%pname \ffun $"-++>"
%%pname \rel $"<->"
%%pname \seq $"seq"
%%pname \bag $"bag"
%%pname \finset $"F"
%%pname \nat $"NN"
%%pname \num $"ZZ"
%%pname \upto $".."
%%pname \# $"#"
%%pname \power_1 $"P_1"
%%pname \id $"id"
%%pname \mapsto $"|->"
%%pname \dom $"dom"
%%pname \ran $"ran"
%%pname \fun $"-->"
%%pname \pinj $">+>"
%%pname \inj $">->"
%%pname \psurj $"-+>>"
%%pname \surj $"-->>"
%%pname \bij $">->>"
%%pname \finj $">++>"
%%pname \disjoint $"disjoint"
%%pname \partition $"partition"

%%tame \cup \cap \setminus \bigcup \bigcap count \uplus items
%%tame \plus \cat head last tail front rev \filter \dcat
%%tame first second \mapsto \dom \ran \dres \rres \ndres \nrres 
%%tame \inv \limg\rimg \oplus \comp \circ
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{amsmath}
\ProvidesPackage{mathz_core}[2022/11/29 mathz Library Core Definitions]

% formal parameters for generic constructions
\newcommand{\genA}{\mathsf{a}}
\newcommand{\genB}{\mathsf{b}}
\newcommand{\genC}{\mathsf{c}}
\newcommand{\genD}{\mathsf{d}}
\newcommand{\genE}{\mathsf{e}}
\newcommand{\genF}{\mathsf{f}}
\newcommand{\genG}{\mathsf{g}}
\newcommand{\genH}{\mathsf{h}}
\newcommand{\genI}{\mathsf{i}}
\newcommand{\genJ}{\mathsf{j}}
\newcommand{\genK}{\mathsf{k}}
\newcommand{\genL}{\mathsf{l}}
\newcommand{\genM}{\mathsf{m}}
\newcommand{\genN}{\mathsf{n}}
\newcommand{\genO}{\mathsf{o}}
\newcommand{\genP}{\mathsf{p}}
\newcommand{\genQ}{\mathsf{q}}
\newcommand{\genR}{\mathsf{r}}
\newcommand{\genS}{\mathsf{s}}
\newcommand{\genT}{\mathsf{t}}
\newcommand{\genU}{\mathsf{u}}
\newcommand{\genV}{\mathsf{v}}
\newcommand{\genW}{\mathsf{w}}
\newcommand{\genX}{\mathsf{x}}
\newcommand{\genY}{\mathsf{y}}
\newcommand{\genZ}{\mathsf{z}}

% arbitrary sets used in theorems, remarks, and examples involving generic constructs
\newcommand{\setA}{\mathsf{A}}
\newcommand{\setB}{\mathsf{B}}
\newcommand{\setC}{\mathsf{C}}
\newcommand{\setD}{\mathsf{D}}
\newcommand{\setE}{\mathsf{E}}
\newcommand{\setF}{\mathsf{F}}
\newcommand{\setG}{\mathsf{G}}
\newcommand{\setH}{\mathsf{H}}
\newcommand{\setI}{\mathsf{I}}
\newcommand{\setJ}{\mathsf{J}}
\newcommand{\setK}{\mathsf{K}}
\newcommand{\setL}{\mathsf{L}}
\newcommand{\setM}{\mathsf{M}}
\newcommand{\setN}{\mathsf{N}}
\newcommand{\setO}{\mathsf{O}}
\newcommand{\setP}{\mathsf{P}}
\newcommand{\setQ}{\mathsf{Q}}
\newcommand{\setR}{\mathsf{R}}
\newcommand{\setS}{\mathsf{S}}
\newcommand{\setT}{\mathsf{T}}
\newcommand{\setU}{\mathsf{U}}
\newcommand{\setV}{\mathsf{V}}
\newcommand{\setW}{\mathsf{W}}
\newcommand{\setX}{\mathsf{X}}
\newcommand{\setY}{\mathsf{Y}}
\newcommand{\setZ}{\mathsf{Z}}
\documentclass{amsart}

\usepackage{mathz_project}
\usepackage{mathz_core}

\usepackage{mathz_preamble}

\addbibresource{mathz_references.bib}

\begin{document}

\title{\mathz\ Library Core Objects}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains \ZN\ definitions for some  \mathz\ library core objects,
namely formal generic parameters and arbitrary sets.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

The \texttt{core} package contains definitions for formal generic parameters and arbitrary sets.

\section{Formal Generic Parameters}

\ZN\ supports the definition of generic constants and schemas which take sets as parameters.
Formal generic parameters are used in these definitions.
It is useful to typographically distinguish formal generic parameters from other objects.
Therefore, as a purely stylistic convention, we use the symbols $\genA, \genB, \dots, \genZ$ to denote formal generic parameters.
These symbols are produced using the \LaTeX\ commands \verb|\genA|, \verb|\genB|, $\dots$, \verb|\genZ|.

For example, define the generic constant $triple[\genT]$ to be the set of all triples of elements of $\genT$ 
where $\genT$ is any set.
\begin{zed}
	triple[\genT] == \genT \cross \genT \cross \genT
\end{zed}

\section{Arbitrary Sets}

In mathematical writing we often need to state theorems, remarks, and examples about generic constructions.
Such statements must hold when each formal generic parameter is replaced by any arbitrary set.
This condition is equivalent to universally quantifying the statement over the set of all sets.
However, \ZN\ does not allow universal quantification over the set of all sets since this leads to the Russell paradox.
In fact, Russell proposed typed set theory as a way to avoid this paradox.

Some formal languages avoid the Russell paradox by making a distinction between sets and types,
and by introducing an explicit hierarchy of type universes in which the collection of all types at a given level belongs to the next level.
Another approach is to distinguish between small sets and large sets, with the set of all small sets being a large set.
\ZN\ avoids the Russel paradox by not allowing universal quantification over types.

In more detail, although \ZN\ is based on typed set theory, 
it does not actually include a syntactic mechanism to represent types. 
New base types are introduced by declaring them as \textit{given sets}.
It is a \ZN\ type error to compare or combine subsets of distinct given sets.
A given set is not a proper subset of any other set, and is therefore a \textit{maximal set}.
Thus, in \ZN, a new type is equated to its maximal set.

As a workaround for the absence in \ZN\ of a way to universally quantify over types, 
we adopt the convention of stating theorems, remarks, and examples that are asserted to hold for arbitrary sets 
by stating them in terms of certain predefined given sets, with the understanding that these 
predefined given sets are completely unconstrained by additional axioms.
We refer to these predefined given sets as \textit{arbitrary sets}.
It is therefore a \mathz\ error to use any of these predefined arbitrary sets outside of the statement of a theorem, remark, or example.

This workaround is similar to the introduction rule for universal quantification in predicate calculus.
To prove a universally quantified statement in predicate calculus, one assumes an arbitrary element and then proves the conclusion for it.
Since the element was arbitrary, one can then universally quantify over it.
Of course, in \mathz\ we will only prove statements for some arbitrary set, and not explicitly quantify over it.

Let the symbols $\setA, \setB, \dots \setZ$ denote these predefined arbitrary sets.
\begin{zed}
	[\setA, \setB, \setC, \setD, \setE, \setF, \setG, \setH, \setI, \setJ, \setK, \setL, \setM, 
	\setN, \setO, \setP, \setQ, \setR, \setS, \setT, \setU, \setV, \setW, \setX, \setY, \setZ]
\end{zed}
These symbols are produced using the \LaTeX\ commands \verb|\setA|, \verb|\setB|, $\dots$, \verb|\setZ|.

For example, consider the following statement which holds for the arbitrary set $\setX$.
\begin{remark}
Equality is reflexive.
\begin{zed}
	\forall x: \setX @ x = x
\end{zed}
\end{remark}

\printbibliography

\end{document}  \NeedsTeXFormat{LaTeX2e}
\RequirePackage{amsmath}
\ProvidesPackage{mathz_sets}[2022/02/01 Z Notation for sets package]

% sets

% families of sets
%%pregen \Fam
\DeclareMathOperator{\Fam}{\mathcal{F}}

% the induced family infix operator
%%inop \inducedFam 6
\newcommand{\inducedFam}{\mathbin{|_{\Fam}}}

% the product family infix operator
%%inop \prodFam 5
\newcommand{\prodFam}{\mathbin{\cross_{\Fam}}}

% the constant function
\DeclareMathOperator{\const}{const}

% the function restriction infix operator
%%inop \restrictU 6
\newcommand{\restrictU}{\mathbin{|}}

% the set of binary digits
\newcommand{\B}{\mathbb{B}}

% the indicator function of a set
%%pregen \indF
\DeclareMathOperator{\indF}{\mathbf{1}}

% the delta function of a set
%%pregen \deltaF
\DeclareMathOperator{\deltaF}{\delta}
\documentclass{amsart}

\usepackage{mathz_core}
\usepackage{mathz_sets}

\usepackage{mathz_preamble}

\addbibresource{mathz_references.bib}

\begin{document}

\title{Sets}
\author{Arthur Ryman}
\email[Arthur Ryman]{arthur.ryman@gmail.com}
\date{\today}

\begin{abstract}
This article contains \ZN\ definitions for 
concepts related to sets.
It has been type checked by \fuzz.
\end{abstract}

\maketitle

\tableofcontents

\section{Introduction}

Typed set theory forms the mathematical foundation of \ZN\cite{spivey-zrm}.
Many set theory concepts are defined in its built-in mathematical toolkit. 
This article augments the toolkit with some additional concepts.
It has been type checked by \fuzz\cite{spivey-fm}.

\section{Binary Digits}

Let $bit$ denote the set of \textit{binary digits}, namely the set $\{ 0, 1\} \subseteq \num$.

\begin{zed}
	bit == \{ 0, 1 \}
\end{zed}

Let the notation $\B$ denote the set of bits.

\begin{zed}
	\B == bit
\end{zed}

\begin{example}
Zero and one are bits, but two isn't.
\begin{zed}
	0 \in \B
\also
	1 \in \B
\also
	2 \notin \B
\end{zed}
\end{example}

\section{Families of Subsets}

Let $\genT$ be a set.
A \textit{family} of subsets of $\genT$ is a set of subsets of $\genT$.
Let $Fam[\genT]$ denote the set of all families of subsets of $\genT$.

\begin{zed}
	Fam[\genT] == \power(\power \genT)
\end{zed}

\begin{example}
The set consisting of the empty set and $\setX$ is a family of subsets of $\setX$.
\begin{zed}
	\{ \emptyset, \setX \} \in Fam[\setX]
\end{zed}
\end{example}

Let the notation $\Fam \genT$ denote the family of subsets of $\genT$ .

\begin{zed}
	\Fam \genT == Fam[\genT]
\end{zed}

\section{Functions}

\subsection{Binary Functions}

Let $\genT$ be a set. A function that maps $\genT$ to $\B$ is called a \textit{binary function} on $\genT$.

\begin{zed}
	binary\_function[\genT] == \genT \fun \B
\end{zed}

\begin{example}
The function that maps the set $\setT$ to $0$ is a binary function.
\begin{zed}
	(\lambda x: \setT @ 0) \in binary\_function[\setT]
\end{zed}
\end{example}

\subsection{Constant Functions}

Let $\genT$ and $\genU$ be sets and let $c$ be some given element of  $\genU$.
The mapping $f$ that sends every element $x$ of $\genT$ to $c$ is called the \textit{constant function} on $\genT$ with value $c$.

\begin{schema}{ConstantFunction}[\genT, \genU]
	c: \genU \\
	f: \genT \fun \genU
\where
	f = (\lambda x: \genT @ c)
\end{schema}

Let $constant\_function~c$ denote the constant function $f$ on $\genT$ with value $c$.

\begin{zed}
	constant\_function[\genT, \genU] == \{~ConstantFunction[\genT, \genU] @ c \mapsto f ~\}
\end{zed}

\begin{remark}
The mapping $constant\_function$ maps each element $c \in \setU$ to a function $\setT \fun \setU$.
\begin{zed}
	constant\_function[\setT, \setU] \in \setU \fun (\setT \fun \setU)
\end{zed}
\end{remark}

Let the notation $\const c$ denote the constant function with value $c$.

\begin{zed}
	\const[\genT, \genU] == constant\_function[\genT, \genU]
\end{zed}

\begin{remark}
\begin{zed}
	\forall c: \setU; x: \setT @ \const[\setT, \setU] c~x = c
\end{zed}
\end{remark}

\subsection{Delta Functions}

Let $\genT$ be a set and let $x, y \in \genT$. 
Define the \textit{equality indicator bit} $z$ of $(x, y)$ to be $1$ if $x = y$ and $0$ otherwise.

\begin{schema}{EqualityIndicator}[\genT]
	x, y: \genT \\
	z: \B
\where
	z = \IF x = y \THEN 1 \ELSE 0
\end{schema}

Define the delta function $delta(x, y)$ to be the equality indication bit of $(x, y)$.

\begin{zed}
	delta[\genT] == \{~ EqualityIndicator[\genT] @ (x, y) \mapsto z ~\}
\end{zed}

\begin{remark}
\begin{zed}
	delta[\setX] \in \setX \cross \setX \fun \B
\end{zed}
\end{remark}

\begin{example}
\begin{zed}
	delta(0, 0) = 1
\also
	delta(0, 1) = 0
\end{zed}
\end{example}

\begin{remark}
\begin{zed}
	\forall x: \setX @ \\
	\t1	delta(x, x) = 1
\end{zed}
\end{remark}

Let the notation $\deltaF \genT$ denote the delta function $delta[\genT]$.

\begin{zed}
	\deltaF \genT == delta[\genT]
\end{zed}

\begin{example}
\begin{zed}
	(\deltaF \num) (0,1) = 0
\end{zed}
\end{example}

\subsection{Function Restriction}

Let $\genT$ and $\genU$ be sets, let $f: \genT \fun \genU$, and let $T \subseteq \genT$ be a subset.
Let $g$ denote the restriction of $f$ to $T$.

\begin{schema}{FunctionRestriction}[\genT, \genU]
	f: \genT \fun \genU \\
	T: \power \genT \\
	g: \genT \pfun \genU
\where
	g = T \dres f
\end{schema}

Let  $restriction(f, T)$ denote the restriction of $f$ to $T$.

\begin{zed}
	restriction[\genT, \genU] == \{~ FunctionRestriction[\genT, \genU] @ (f, T) \mapsto g ~\}
\end{zed}

\begin{remark}
\begin{zed}
	restriction[\setT, \setU] \in (\setT \fun \setU) \cross \power \setT \fun (\setT \pfun \setU)
\end{zed}
\end{remark}

Let the notation $f \restrictU T$ denote the restriction of $f$ to $T$.

\begin{zed}
	(\_ \restrictU \_)[\genT, \genU] == restriction[\genT, \genU]
\end{zed}

\begin{remark}
Function restriction is domain restriction with arguments reversed.
\begin{zed}
	\forall FunctionRestriction[\setT, \setU] @ \\
	\t1	f \restrictU T = T \dres f
\end{zed}
\end{remark}

\subsection{Indicator Functions}

Let $\genT$ be a set and let $X \subseteq \genT$ be a subset.
The \textit{indicator function}  $f$  of $X$ maps each element $a \in \genT$ to 1 if $a \in X$ and 0 otherwise.
The indicator function is also referred to as the \textit{characteristic function} of $X$.

\begin{schema}{IndicatorFunction}[\genT]
	X: \power \genT \\
	f: \genT \fun \B
\where
	f = (\lambda a: \genT @ \IF a \in X \THEN 1 \ELSE 0)
\end{schema}

Let $indicator\_function~X$ denote the indicator function of $X$.

\begin{zed}
	indicator\_function[\genT] == \{~ IndicatorFunction[\genT] @ X \mapsto f ~\}
\end{zed}

\begin{remark}
For each subset $X \subseteq \setT$, the indicator function of $X$ is a binary function on $\setT$.
\begin{zed}
	indicator\_function[\setT] \in \power \setT \fun \setT \fun \B
\end{zed}
\end{remark}

We introduce the prefix generic symbol $(\indF \_)$ where $(\indF \genT)X = indicator\_function[\genT] X$.

\begin{zed}
	\indF \genT == indicator\_function[\genT]
\end{zed}

\begin{remark}
The domain of the range restriction of the indicator function of a set $X$ to the range $\{1\}$ is $X$.
\begin{zed}
	\forall X: \power \setT @ \\
	\t1	\dom((\indF \setT)X \rres \{1\}) = X
\end{zed}
\end{remark}

\section{The Support of a Function}

Let $\genT$ be a set and let $f$ be an integer-valued function on $\genT$.
The \textit{support} $S$ of $f$ is the set of elements $x$ in $\genT$  that take nonzero values.

\begin{schema}{Support}[\genT]
	f: \genT \fun \num \\
	S: \power \genT
\where
	S = \{~ x: \genT | f~x \neq 0 ~\}
\end{schema}

Let $support~f$ denote the support $S$ of $f$.

\begin{zed}
	support[\genT] == \{~ Support[\genT] @ f \mapsto S ~\}
\end{zed}

\begin{example}
The support of the indicator function of a set $X$ is $X$.
\begin{zed}
	\forall X: \power \setT @ \\
	\t1 support((\indF \setT)X) = X
\end{zed}
\end{example}

An integer-valued function is said to have \textit{finite support} if its support is a finite set.

\begin{schema}{FiniteSupport}[\genT]
	Support[\genT]
\where
	S \in \finset \genT
\end{schema}

Let $finite\_support[\genT]$ denote the set of all integer-valued functions on $\genT$ that have finite support.

\begin{zed}
	finite\_support[\genT] == \{~ FiniteSupport[\genT] @ f ~\}
\end{zed}

\begin{remark}
\begin{zed}
	finite\_support[\setT] \subseteq \setT \fun \num
\end{zed}
\end{remark}

\printbibliography

\end{document}\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mathz_topological_spaces}[2022/02/01 Z Notation for topological spaces package]
\RequirePackage{amsmath}

% continuous mappings between topological spaces
\DeclareMathOperator{\CzeroTT}{C^0}

% topological decoration on operators
\newcommand{\topology}{\mathsf{top}}

% the induced topological space infix operator
\newcommand{\inducedTopSp}{\mathbin{|_\topology}}
%%inop \inducedTopSp 6

% the product topology infix operator
\newcommand{\prodTop}{\mathbin{\cross_\topology}}
%%inop \prodTop 5

% the product topological space infix operator
\newcommand{\prodTopSp}{\mathbin{\cross_\topology}}
%%inop \prodTopSp 5
